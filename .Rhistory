{
channel<-connectPostgres()  #, pwd = "locknload"
qr<-paste("select max(importdate) from immolog where region='",region, "'", sep="")
mx<-dbGetQuery(channel, qr)
disconnectPostgres(channel)
if (as.POSIXlt(mx$max,tz = "GMT")<as.POSIXlt(as.character(curDate),tz = "GMT"))
{
#write
fr<-fa[,c("id", "importdate")]
fnd<-fr[!duplicated(fr[,"id"]),]
startzeit<-Sys.time()
channel<-connectPostgres()  #, pwd = "locknload"
dbWriteTable(channel, name="immolog", value=fnd , append=TRUE, row.names=FALSE, overwrite=FALSE)
disconnectPostgres(channel)
laufzeit<-Sys.time()-startzeit
print("ImmoLog Written")
print(laufzeit)
}else{
print("Immolog Skipped")
}
}
library(sp)
library(XML)
library(rjson)
library(dplyr)
source("getImmo.R")
source("dbFunctions.R")
regionList<-"Baden-Wuerttemberg"
for (region in regionList)
{
f<-getImmo(region=region,maxPages = 1000)
attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
colnames(attributes)<-c("price","area", "rooms")
fa<-cbind(f,attributes)
curDate<-Sys.Date()
fa$importdate<-curDate
fa$region<-region
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
# rms<-fa$rooms%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("Zi.","",x) else x)%>%unlist() ###Zi.
# fa$rooms<-as.numeric(gsub(",",".",rms))
#
#
# prc<-fa$price%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub(" \u20ac","",x) else x)%>%unlist() ###€
#
# lind<-which(nchar(prc) %in% c(5))
# bef<-substr(prc[lind],1,1)
# aft<-substr(prc[lind],3,5)
# conc<-paste(bef,aft,sep = "")
# prcw<-prc
# prcw[lind]<-conc
#
# fa$price<-as.numeric(prcw)
#
#
# are<-fa$area%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("m\u00b2","",x) else x)%>%unlist() ### m²
# fa$area<-as.numeric(are)
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/",region_, "_",date_, ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
}
fa[1:10]
fa[1:10,]
as.character(curDate)
source('D:/Work/immo/writeImmo.R')
source('D:/Work/immo/dbFunctions.R')
library(sp)
library(XML)
library(rjson)
library(dplyr)
source("getImmo.R")
source("dbFunctions.R")
regionList<-"Baden-Wuerttemberg"
for (region in regionList)
{
f<-getImmo(region=region,maxPages = 1000)
attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
colnames(attributes)<-c("price","area", "rooms")
fa<-cbind(f,attributes)
curDate<-Sys.Date()
fa$importdate<-as.character(curDate)
fa$region<-region
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
# rms<-fa$rooms%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("Zi.","",x) else x)%>%unlist() ###Zi.
# fa$rooms<-as.numeric(gsub(",",".",rms))
#
#
# prc<-fa$price%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub(" \u20ac","",x) else x)%>%unlist() ###€
#
# lind<-which(nchar(prc) %in% c(5))
# bef<-substr(prc[lind],1,1)
# aft<-substr(prc[lind],3,5)
# conc<-paste(bef,aft,sep = "")
# prcw<-prc
# prcw[lind]<-conc
#
# fa$price<-as.numeric(prcw)
#
#
# are<-fa$area%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("m\u00b2","",x) else x)%>%unlist() ### m²
# fa$area<-as.numeric(are)
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/",region_, "_",date_, ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
}
fr
writeImmoLog(fa, region, curDate)
fr<-fa[,c("id", "importdate")]
fnd<-fr[!duplicated(fr[,"id"]),]
channel<-connectPostgres()  #, pwd = "locknload"
dbWriteTable(channel, name="immolog", value=fnd )
disconnectPostgres(channel)
fr<-fa[,c("id", "importdate", "region")]
fnd<-fr[!duplicated(fr[,"id"]),]
fr<-fa[,c("id", "importdate", "region")]
fnd<-fr[!duplicated(fr[,"id"]),]
startzeit<-Sys.time()
channel<-connectPostgres()  #, pwd = "locknload"
#dbWriteTable(channel, name="immolog", value=fnd , append=TRUE, row.names=FALSE, overwrite=FALSE)
dbWriteTable(channel, name="immolog", value=fnd )
disconnectPostgres(channel)
laufzeit<-Sys.time()-startzeit
print("ImmoLog Written")
print(laufzeit)
channel<-connectPostgres()  #, pwd = "locknload"
qr<-paste("select max(importdate) from immolog where region='",region, "'", sep="")
mx<-dbGetQuery(channel, qr)
disconnectPostgres(channel)
mx
as.POSIXlt(mx$max,tz = "GMT")<as.POSIXlt(curDate,tz = "GMT")
as.POSIXlt(mx$max,tz = "GMT")
s.POSIXlt(curDate,tz = "GMT")
as.POSIXlt(curDate,tz = "GMT")
as.POSIXlt(curDate)
as.POSIXlt(mx$max)
as.POSIXct(mx$max)
as.POSIXct(curDate)
curDate<-as.character(Sys.Date())
channel<-connectPostgres()  #, pwd = "locknload"
qr<-paste("select max(importdate) from immolog where region='",region, "'", sep="")
mx<-dbGetQuery(channel, qr)
disconnectPostgres(channel)
as.POSIXlt(mx$max,tz = "GMT")
as.POSIXlt(curDate,tz = "GMT")
as.POSIXlt(mx$max,tz = "GMT")<as.POSIXlt(curDate,tz = "GMT")
source('D:/Work/immo/dbFunctions.R')
writeImmoLog(fa, region, curDate)
regionList<-"Thueringen"
nchar(mx$max)
channel<-connectPostgres()  #, pwd = "locknload"
qr<-paste("select max(importdate) from immolog where region='",region, "'", sep="")
mx<-dbGetQuery(channel, qr)
disconnectPostgres(channel)
mx
region<-"Thueringen"
channel<-connectPostgres()  #, pwd = "locknload"
qr<-paste("select max(importdate) from immolog where region='",region, "'", sep="")
mx<-dbGetQuery(channel, qr)
disconnectPostgres(channel)
mx
nchar(mx$max)
mx
is.na(mx$max)
source('D:/Work/immo/dbFunctions.R')
library(sp)
library(XML)
library(rjson)
library(dplyr)
source("getImmo.R")
source("dbFunctions.R")
for (region in regionList)
{
f<-getImmo(region=region,maxPages = 1000)
attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
colnames(attributes)<-c("price","area", "rooms")
fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
# rms<-fa$rooms%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("Zi.","",x) else x)%>%unlist() ###Zi.
# fa$rooms<-as.numeric(gsub(",",".",rms))
#
#
# prc<-fa$price%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub(" \u20ac","",x) else x)%>%unlist() ###€
#
# lind<-which(nchar(prc) %in% c(5))
# bef<-substr(prc[lind],1,1)
# aft<-substr(prc[lind],3,5)
# conc<-paste(bef,aft,sep = "")
# prcw<-prc
# prcw[lind]<-conc
#
# fa$price<-as.numeric(prcw)
#
#
# are<-fa$area%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("m\u00b2","",x) else x)%>%unlist() ### m²
# fa$area<-as.numeric(are)
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/",region_, "_",date_, ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
}
fa[1:10,]
writeImmoLog(fa, region, curDate)
channel<-connectPostgres()  #, pwd = "locknload"
disconnectPostgres(channel)
fa
str(fa)
str(fa)
fand<-fr[!duplicated(fa[,"id"]),]
str(fand)
fand<-fa[!duplicated(fa[,"id"]),]
str(fand)
dbWriteTable(channel, name="detailslow", value=fand )
channel<-connectPostgres()  #, pwd = "locknload"
dbWriteTable(channel, name="detailslow", value=fand )
disconnectPostgres(channel)
channel<-connectPostgres()  #, pwd = "locknload"
fand<-fa[!duplicated(fa[,"id"]),]
dbWriteTable(channel, name="immolist", value=fand )
disconnectPostgres(channel)
channel<-connectPostgres()  #, pwd = "locknload"
qr<-paste("select id from immolog where region='",region, "'", sep="")
ids<-dbGetQuery(channel, qr)
disconnectPostgres(channel)
ids
fa
install.packages("RSQLite") #perhaps needed
library("RSQLite")
library("sqldf")
install.packages("sqldf") #perhaps needed
sqldf('select count(*) from fa')
library("sqldf")
sqldf('select count(*) from fa')
sqldf('select f.* from fa f left join ids i
on f.id=i.id
where i.id is null')
sqldf('select f.* from fa f left join ids i
on f.id=i.id
')
match(c(1,2,3),c(1,2))
match(c(1,1,1),c(1,2))
merge(x = fand, y=ids, by = "id")
merge(x = fand, y=ids, by = "id",all.y = F)
fand$id
fand$id%in%ids$id
fand$id !%in% ids$id
!(fand$id %in% ids$id)
which(!(fand$id %in% ids$id))
length(newind)
newind<-which(!(fand$id %in% ids$id))
length(newind)
newentries<-fand[newind,]
channel<-connectPostgres()
fand<-fa[!duplicated(fa[,"id"]),]
dbWriteTable(channel, name="immolist", value=fand )
disconnectPostgres(channel)
channel<-connectPostgres()  #, pwd = "locknload"
qr<-paste("select id from immoist where region='",region, "'", sep="")
ids<-dbGetQuery(channel, qr)
disconnectPostgres(channel)
channel<-connectPostgres()  #, pwd = "locknload"
qr<-paste("select id from immolist where region='",region, "'", sep="")
ids<-dbGetQuery(channel, qr)
disconnectPostgres(channel)
ids
newind<-which(!(fand$id %in% ids$id))
source('D:/Work/immo/dbFunctions.R')
source('D:/Work/immo/dbFunctions.R')
source('D:/Work/immo/dbFunctions.R')
fand<-fa[!duplicated(fa[,"id"]),]
channel<-connectPostgres()
dbWriteTable(channel, name="newrows", value=fand["id",])
disconnectPostgres(channel)
ids<-fand[,"id"]
ids<-fand[,c("id","importdate")]
channel<-connectPostgres()
dbWriteTable(channel, name="newrows", value=ids)
disconnectPostgres(channel)
channel<-connectPostgres()
dbWriteTable(channel, name="newrows", value=ids)
dbSendQuery(conn = channel, statement = "delete from immolist where id in (select id from newrows)")
disconnectPostgres(channel)
fand<-fa[!duplicated(fa[,"id"]),]
ids<-fand[,c("id","importdate")]
channel<-connectPostgres()
dbWriteTable(channel, name="newrows", value=ids)
dbSendPreparedQuery(conn = channel, statement = "delete from immolist where id in (select id from newrows)")
disconnectPostgres(channel)
source('D:/Work/immo/dbFunctions.R')
load("../immoData/DEU_adm1.Rdata")
regionList<-names(table(gadm$NAME_1))
regionList[16]<-"Thueringen"
regionList[1]<-"Baden-Wuerttemberg"
library(sp)
library(XML)
library(rjson)
library(dplyr)
source("getImmo.R")
source("dbFunctions.R")
for (region in regionList)
{
f<-getImmo(region=region,maxPages = 1000)
attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
colnames(attributes)<-c("price","area", "rooms")
fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/",region_, "_",date_, ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoLog(fa)
}
load("../immoData/DEU_adm1.Rdata")
regionList<-names(table(gadm$NAME_1))
regionList[16]<-"Thueringen"
regionList[1]<-"Baden-Wuerttemberg"
regionList<-regionList[2:16]
library(sp)
library(XML)
library(rjson)
library(dplyr)
source("getImmo.R")
source("dbFunctions.R")
for (region in regionList)
{
f<-getImmo(region=region,maxPages = 1000)
attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
colnames(attributes)<-c("price","area", "rooms")
fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/",region_, "_",date_, ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoLog(fa)
}
fa[1:10,]
writeImmoLog(fa, region, curDate)
writeImmoLog(fa)
load("../immoData/DEU_adm1.Rdata")
regionList<-names(table(gadm$NAME_1))
regionList[16]<-"Thueringen"
regionList[1]<-"Baden-Wuerttemberg"
#regionList<-regionList[2:16]
#regionList<-"Baden-Wuerttemberg"
#regionList<-"Thueringen"
#region<-"Thueringen"
library(sp)
library(XML)
library(rjson)
library(dplyr)
source("getImmo.R")
source("dbFunctions.R")
for (region in regionList)
{
f<-getImmo(region=region,maxPages = 1000)
attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
colnames(attributes)<-c("price","area", "rooms")
fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/",region_, "_",date_, ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}
source('D:/Work/immo/dbFunctions.R')
source('D:/Work/immo/dbFunctions.R')
regionList<-"Baden-Wuerttemberg"
library(sp)
library(XML)
library(rjson)
library(dplyr)
source("getImmo.R")
source("dbFunctions.R")
for (region in regionList)
{
fa<-getImmo(region=region,maxPages = 1000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/",region_, "_",date_, ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}
writeImmoList(fa)
source('D:/Work/immo/dbFunctions.R')
writeImmoList(fa)
load("../immoData/DEU_adm1.Rdata")
regionList<-names(table(gadm$NAME_1))
regionList[16]<-"Thueringen"
regionList[1]<-"Baden-Wuerttemberg"
regionList<-regionList[2:16]
source('D:/Work/immo/dbFunctions.R')
library(sp)
library(XML)
library(rjson)
library(dplyr)
source("getImmo.R")
source("dbFunctions.R")
for (region in regionList)
{
fa<-getImmo(region=region,maxPages = 1000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/",region_, "_",date_, ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}
source('D:/Work/immo/getImmo.R')
regionList<-"Nordrhein-Westfalen"
library(sp)
library(XML)
library(rjson)
library(dplyr)
source("getImmo.R")
source("dbFunctions.R")
for (region in regionList)
{
fa<-getImmo(region=region,maxPages = 10000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/",region_, "_",date_, ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}
