qtype<-as.integer(as.character(qframe$qtype[typeind]))
fa<-getImmo(region=region,type=qframe$qstring[typeind],maxPages = 10000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
fa$qtype<-qtype
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
fa$id<-as.integer(fa$id)
fa$privateOffer<-as.logical(fa$privateOffer)
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/"  ,date_,"_",qtype,"_"  ,region_,  ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}}
vec<-c(1, "Wohnung-Miete",2,"Haus-Miete",3,"Wohnung-Kauf",4,"Haus-Kauf",5,"Grundstueck-Kauf",6, "Versteigerung")
#vec<-c(2,"Haus-Miete",3,"Wohnung-Kauf",4,"Haus-Kauf",5,"Grundstueck-Kauf",6, "Versteigerung")
#vec<-c(7,"Buero-Praxis",8,"Wohnung-Kauf",9,"Haus-Kauf",10,"Grundstueck-Kauf",11, "Versteigerung")
qframe<-as.data.frame(matrix(vec, ncol = 2, byrow = T))
colnames(qframe)<-c("qtype","qstring")
dim(qframe)
load("../immoData/DEU_adm1.Rdata")
regionList<-names(table(gadm$NAME_1))
regionList[16]<-"Thueringen"
regionList[1]<-"Baden-Wuerttemberg"
#regionList<-"Nordrhein-Westfalen"
#regionList<-regionList[2:16]
#regionList<-"Baden-Wuerttemberg"
#regionList<-"Thueringen"
#region<-"Thueringen"
library(sp)
library(XML)
library(rjson)
library(dplyr)
source("getImmo.R")
source("dbFunctions.R")
for (typeind in 1:dim(qframe)[1])
{
for (region in regionList)
{
qtype<-as.integer(as.character(qframe$qtype[typeind]))
fa<-getImmo(region=region,type=qframe$qstring[typeind],maxPages = 10000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
fa$qtype<-qtype
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
fa$id<-as.integer(fa$id)
fa$privateOffer<-as.logical(fa$privateOffer)
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/"  ,date_,"_",qtype,"_"  ,region_,  ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}}
id<-72453376L
idc<-as.character(id)
before<-"http://www.immobilienscout24.de/expose/"
urllink<-paste(before, idc,sep="")
Sys.sleep(runif(min = 1.1, max=2,n = 1))
print(paste(Sys.time(),region,counter,urllink))
doc=try(htmlParse(urllink))
library(RCurl)
library(XML)
library(stringr)
source("extractFunctions.R")
doc=try(htmlParse(urllink))
df<-as.data.frame(id)
df$id<-as.integer(id)
df$wohnungstyp<-immoExtractNodeDdRegular(doc, "is24qa-wohnungstyp")
df$zimmer<-as.numeric(immoExtractNodeDdRegular(doc, "is24qa-zimmer"))
df$wohnflaeche<-as.numeric(immoExtractNodeDdSpecialNumbers(doc, "is24qa-wohnflaeche-ca"))
df$etage<-as.numeric(immoExtractNodeDdRegular(doc, "is24qa-etage"))
df$etagenanzahl<-as.numeric(immoExtractNodeDdRegular(doc, "is24qa-etagenanzahl"))
df$schlafzimmer<-as.numeric(immoExtractNodeDdRegular(doc, "is24qa-schlafzimmer"))
df$badezimmer<-as.numeric(immoExtractNodeDdRegular(doc, "is24qa-badezimmer"))
df$bezugsfrei<-immoExtractNodeDdRegular(doc, "is24qa-bezugsfrei-ab")
df$stellplatz<-immoExtractNodeDdRegular(doc, "is24qa-garage-stellplatz")
df$anz_stellplatz<-as.integer(immoExtractNodeDdRegular(doc, "is24qa-anzahl-garage-stellplatz"))
df$balkon<-as.integer(immoExtractNodeDdSpecialCheck(doc,"is24qa-balkon-terrasse"))
df$keller<-as.integer(immoExtractNodeDdSpecialCheck(doc,"is24qa-keller"))
df$einbaukueche<-as.integer(immoExtractNodeDdSpecialCheck(doc,"is24qa-einbaukueche"))
df$gaeste_wc<-as.integer(immoExtractNodeDdSpecialCheck(doc,"is24qa-gaeste-wc"))
###########################################
kaltmiete<-immoExtractNodeDdSpecialNumbers(doc, "is24qa-kaltmiete")
df$kaltmiete<-as.numeric(gsub(",","",kaltmiete))
df$nebenkosten<-as.numeric(immoExtractNodeDdSpecialNumbers(doc, "is24qa-nebenkosten"))
df$heizkosten<-immoExtractNodeDdRegular(doc, "is24qa-heizkosten")
#immoExtractNodeDdSpecialNumbers(doc, "is24qa-gesamtkosten")
###########################################
df$provision<-immoExtractNodeDdRegular(doc, "is24qa-provision")
df$baujahr<-as.numeric(immoExtractNodeDdRegular(doc, "is24qa-baujahr"))
df$objektzustand<-immoExtractNodeDdRegular(doc, "is24qa-objektzustand")
df$heizungsart<-immoExtractNodeDdRegular(doc, "is24qa-heizungsart")
df$energietraeger<-immoExtractNodeDdRegular(doc, "is24qa-wesentliche-energietraeger")
df$importdate<-importdate
statement = paste("delete from immoxp1 where id=",idc,sep="")
paste("delete from immoxp1 where id=",idc,sep="")
source("readWriteExpose.R")
source('D:/Work/immo/readWriteExpose.R')
source('D:/Work/immo/readWriteExpose.R')
library(sp)
library(XML)
library(rjson)
library(dplyr)
source("getImmo.R")
source("dbFunctions.R")
source("readWriteExpose.R")
library(RJDBC)
source("getImmo.R")
source("dbFunctions.R")
source("readWriteExpose.R")
source('D:/Work/immo/readWriteExpose.R')
source('D:/Work/immo/readWriteExpose.R')
source('D:/Work/immo/readWriteExpose.R')
source('D:/Work/immo/readWriteExpose.R')
source('D:/Work/immo/readWriteExpose.R')
dim(fa)[1]
importdate=as.character(Sys.Date)
as.character(Sys.Date)
importdate=as.character(Sys.Date(),format="%YYYY%MM%DD" )
importdate
importdate=as.character(Sys.Date(),format="%yy%MM%DD" )
importdate
importdate=as.character(Sys.Date(),format="%yyyy%MM%DD" )
importdate
importdate=as.character(Sys.Date(),format="yyyy%MM%DD" )
importdate
importdate=strftime(Sys.Date(),format="yyyy%MM%DD" )
importdate
importdate=strftime(Sys.Date(),format="yyyy%m%dd" )
importdate
importdate=strftime(Sys.Date(),format="%yyyy%m%d" )
importdate
importdate=strftime(Sys.Date(),format="%yy%m%d" )
importdate
importdate=strftime(Sys.Date(),format="%Y%m%d" )
importdate
importdate=strftime(Sys.Date(),format="%Y-%m-%d" )
importdate
regionList<-"Thueringen"
library(sp)
library(XML)
library(rjson)
library(dplyr)
library(RJDBC)
source("getImmo.R")
source("dbFunctions.R")
source("readWriteExpose.R")
for (typeind in 1:dim(qframe)[1])
{
for (region in regionList)
{
qtype<-as.integer(as.character(qframe$qtype[typeind]))
fa<-getImmo(region=region,type=qframe$qstring[typeind],maxPages = 10000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
fa$qtype<-qtype
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
fa$id<-as.integer(fa$id)
fa$privateOffer<-as.logical(fa$privateOffer)
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/"  ,date_,"_",qtype,"_"  ,region_,  ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}}
regionList<-"Thueringen"
vec<-c(1, "Wohnung-Miete",2,"Haus-Miete",3,"Wohnung-Kauf",4,"Haus-Kauf",5,"Grundstueck-Kauf",6, "Versteigerung")
#vec<-c(2,"Haus-Miete",3,"Wohnung-Kauf",4,"Haus-Kauf",5,"Grundstueck-Kauf",6, "Versteigerung")
#vec<-c(7,"Buero-Praxis",8,"Wohnung-Kauf",9,"Haus-Kauf",10,"Grundstueck-Kauf",11, "Versteigerung")
qframe<-as.data.frame(matrix(vec, ncol = 2, byrow = T))
colnames(qframe)<-c("qtype","qstring")
dim(qframe)
library(sp)
library(XML)
library(rjson)
library(dplyr)
library(RJDBC)
source("getImmo.R")
source("dbFunctions.R")
source("readWriteExpose.R")
for (typeind in 1:dim(qframe)[1])
{
for (region in regionList)
{
qtype<-as.integer(as.character(qframe$qtype[typeind]))
fa<-getImmo(region=region,type=qframe$qstring[typeind],maxPages = 10000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
fa$qtype<-qtype
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
fa$id<-as.integer(fa$id)
fa$privateOffer<-as.logical(fa$privateOffer)
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/"  ,date_,"_",qtype,"_"  ,region_,  ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}}
source('D:/Work/immo/readWriteExpose.R')
library(sp)
library(XML)
library(rjson)
library(dplyr)
library(RJDBC)
source("getImmo.R")
source("dbFunctions.R")
source("readWriteExpose.R")
for (typeind in 1:dim(qframe)[1])
{
for (region in regionList)
{
qtype<-as.integer(as.character(qframe$qtype[typeind]))
fa<-getImmo(region=region,type=qframe$qstring[typeind],maxPages = 10000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
fa$qtype<-qtype
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
fa$id<-as.integer(fa$id)
fa$privateOffer<-as.logical(fa$privateOffer)
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/"  ,date_,"_",qtype,"_"  ,region_,  ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}}
source('D:/Work/immo/readWriteExpose.R')
library(sp)
library(XML)
library(rjson)
library(dplyr)
library(RJDBC)
source("getImmo.R")
source("dbFunctions.R")
source("readWriteExpose.R")
for (typeind in 1:dim(qframe)[1])
{
for (region in regionList)
{
qtype<-as.integer(as.character(qframe$qtype[typeind]))
fa<-getImmo(region=region,type=qframe$qstring[typeind],maxPages = 10000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
fa$qtype<-qtype
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
fa$id<-as.integer(fa$id)
fa$privateOffer<-as.logical(fa$privateOffer)
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/"  ,date_,"_",qtype,"_"  ,region_,  ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}}
library(sp)
library(XML)
library(rjson)
library(dplyr)
library(RJDBC)
source("getImmo.R")
source("dbFunctions.R")
source("readWriteExpose.R")
source("extractFunctions.R")
for (typeind in 1:dim(qframe)[1])
{
for (region in regionList)
{
qtype<-as.integer(as.character(qframe$qtype[typeind]))
fa<-getImmo(region=region,type=qframe$qstring[typeind],maxPages = 10000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
fa$qtype<-qtype
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
fa$id<-as.integer(fa$id)
fa$privateOffer<-as.logical(fa$privateOffer)
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/"  ,date_,"_",qtype,"_"  ,region_,  ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}}
source('D:/Work/immo/readWriteExpose.R')
library(sp)
library(XML)
library(rjson)
library(dplyr)
library(RJDBC)
source("getImmo.R")
source("dbFunctions.R")
source("readWriteExpose.R")
source("extractFunctions.R")
for (typeind in 1:dim(qframe)[1])
{
for (region in regionList)
{
qtype<-as.integer(as.character(qframe$qtype[typeind]))
fa<-getImmo(region=region,type=qframe$qstring[typeind],maxPages = 10000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
fa$qtype<-qtype
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
fa$id<-as.integer(fa$id)
fa$privateOffer<-as.logical(fa$privateOffer)
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/"  ,date_,"_",qtype,"_"  ,region_,  ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}}
library(sp)
library(XML)
library(rjson)
library(dplyr)
library(RJDBC)
source("getImmo.R")
source("dbFunctions.R")
source("readWriteExpose.R")
source("extractFunctions.R")
for (typeind in 1:dim(qframe)[1])
{
for (region in regionList)
{
qtype<-as.integer(as.character(qframe$qtype[typeind]))
fa<-getImmo(region=region,type=qframe$qstring[typeind],maxPages = 10000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
fa$qtype<-qtype
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
fa$id<-as.integer(fa$id)
fa$privateOffer<-as.logical(fa$privateOffer)
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/"  ,date_,"_",qtype,"_"  ,region_,  ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}}
load("../immoData/DEU_adm1.Rdata")
regionList<-names(table(gadm$NAME_1))
regionList[16]<-"Thueringen"
regionList[1]<-"Baden-Wuerttemberg"
load("../immoData/DEU_adm1.Rdata")
regionList<-names(table(gadm$NAME_1))
regionList[16]<-"Thueringen"
regionList[1]<-"Baden-Wuerttemberg"
library(sp)
library(XML)
library(rjson)
library(dplyr)
library(RJDBC)
source("getImmo.R")
source("dbFunctions.R")
source("readWriteExpose.R")
source("extractFunctions.R")
for (typeind in 1:dim(qframe)[1])
{
for (region in regionList)
{
qtype<-as.integer(as.character(qframe$qtype[typeind]))
fa<-getImmo(region=region,type=qframe$qstring[typeind],maxPages = 10000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
fa$qtype<-qtype
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
fa$id<-as.integer(fa$id)
fa$privateOffer<-as.logical(fa$privateOffer)
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/"  ,date_,"_",qtype,"_"  ,region_,  ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}}
vec<-c(1, "Wohnung-Miete",2,"Haus-Miete",3,"Wohnung-Kauf",4,"Haus-Kauf",5,"Grundstueck-Kauf",6, "Versteigerung")
#vec<-c(2,"Haus-Miete",3,"Wohnung-Kauf",4,"Haus-Kauf",5,"Grundstueck-Kauf",6, "Versteigerung")
#vec<-c(7,"Buero-Praxis",8,"Wohnung-Kauf",9,"Haus-Kauf",10,"Grundstueck-Kauf",11, "Versteigerung")
qframe<-as.data.frame(matrix(vec, ncol = 2, byrow = T))
colnames(qframe)<-c("qtype","qstring")
dim(qframe)
library(sp)
library(XML)
library(rjson)
library(dplyr)
library(RJDBC)
source("getImmo.R")
source("dbFunctions.R")
source("readWriteExpose.R")
source("extractFunctions.R")
for (typeind in 1:dim(qframe)[1])
{
for (region in regionList)
{
qtype<-as.integer(as.character(qframe$qtype[typeind]))
fa<-getImmo(region=region,type=qframe$qstring[typeind],maxPages = 10000)
# attributes<-as.data.frame(matrix(unlist(strsplit(f$attributes, ";")), nrow=dim(f)[1], ncol=3, byrow = T), stringsAsFactors = F)
# colnames(attributes)<-c("price","area", "rooms")
# fa<-cbind(f,attributes)
curDate<-as.character(Sys.Date())
fa$importdate<-curDate
fa$region<-region
fa$qtype<-qtype
region_<-gsub("/","_",region)
date_<-format(Sys.Date(), "%Y%m%d")
tit<-fa$title%>%lapply(function(x) if(is.character(x)|is.factor(x)) gsub("\u0022","",x) else x)%>%unlist() ### """
fa$title<-tit
colnames(fa)[9]<-"attribs"
fa$id<-as.integer(fa$id)
fa$privateOffer<-as.logical(fa$privateOffer)
dir.create(paste("../immoData/",date_, sep=""))
#filenameCSV<-paste("../immoData/",date_,"/",region_, "_",date_, ".csv",sep="")
#write.table(fa,file =  filenameCSV, row.names = F, sep=";", fileEncoding="UTF-8", quote = TRUE)
filenameRda<-paste("../immoData/",date_,"/"  ,date_,"_",qtype,"_"  ,region_,  ".Rdata",sep="")
save("fa", file=filenameRda)
writeImmoLog(fa, region, curDate)
writeImmoList(fa)
}}
