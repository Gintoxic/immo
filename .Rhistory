#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#                   axes=F,
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
for (i in 1:5)
subplot(
plot(ddf[,1])
#lines(ddf[,2])
#lines(ddf[,3])
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#                   axes=F,
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
ddf[,1]
ddf[,2]
for (i in 1:5)
subplot(
plot(ddf[,2])
#lines(ddf[,2])
#lines(ddf[,3])
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#                   axes=F,
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
for (i in 1:5)
subplot(
plot(ddf[,2])
#lines(ddf[,2])
#lines(ddf[,3])
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#                   axes=F,
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
plot(getMap())
for (i in 1:5)
subplot(
plot(ddf[,2])
#lines(ddf[,2])
#lines(ddf[,3])
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#                   axes=F,
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
for (i in 1:5)
subplot(
plot(ddf[,2],    axes=F )
#lines(ddf[,2])
#lines(ddf[,3])
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
plot(getMap())
for (i in 1:5)
subplot(
plot(ddf[,2],    axes=F )
#lines(ddf[,2])
#lines(ddf[,3])
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
plot(ddf[,2],axes=F,xlab = "", ylab="")
plot(ddf[,2],axes=F,xlab = "", ylab="", type="l")
plot(ddf[,2],axes=F,xlab = "", ylab="", type="l",lwd=5)
<- merge(x=ddf, y=sPDF@data[sPDF@data$ADMIN, c("ADMIN", "LON", "LAT")], by.x="country", by.y="ADMIN", all.x=TRUE)
plot(getMap())
for (i in 1:5)
subplot(
plot(ddf[,2],axes=F,xlab = "", ylab="", type="l",lwd=5)
#lines(ddf[,2])
#lines(ddf[,3])
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
plot(getMap())
for (i in 1:5)
subplot(
plot(ddf[,i],axes=F,xlab = "", ylab="", type="l",lwd=5)
#lines(ddf[,2])
#lines(ddf[,3])
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
for (i in 1:5)
subplot(
plot(ddf[i,],axes=F,xlab = "", ylab="", type="l",lwd=5)
#lines(ddf[,2])
#lines(ddf[,3])
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
plot(getMap())
for (i in 1:5)
subplot(
plot(ddf[i,],axes=F,xlab = "", ylab="", type="l",lwd=5)
#lines(ddf[,2])
#lines(ddf[,3])
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
plot(getMap())
for (i in 1:5)
subplot(
plot(ddf[,i],axes=F,xlab = "", ylab="", type="l",lwd=5)
#lines(ddf[,2])
#lines(ddf[,3])
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
ddf[,i]
ddf = read.table(header=T, sep=",", text="
country, val1, val2, val3
Nigeria,5,10,8
China,8,12,20
Brazil,15,9,20
Italy,9,25,5
Australia,15,5,25
")
ddf[,i]
i=1
ddf[,i]
ddf[,2]
ddf[1,]
sPDF
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-kreise")
runApp("r-spatial/shiny-kreise")
runApp("r-spatial/shiny-kreise")
runApp("r-spatial/shiny-kreise")
runApp("r-spatial/shiny-kreise")
i
runApp("r-spatial/shiny-kreise")
runApp("r-spatial/shiny-kreise")
runApp("r-spatial/shiny-punkte")
setwd("C:\\Users\\e.harschack\\Documents\\R\\r-spatial")
library(sp)       # Spatial Package
library(rgeos)    # Polygonberechnungen
# Bundesl?nder
#par.bundeslaender<-c("Rheinland-Pfalz", "Nordrhein-Westfalen", "Hessen")
#par.bundeslaender<-c("Nordrhein-Westfalen")
par.bundeslaender<-c("Rheinland-Pfalz")
#par.bundeslaender<-c("Bayern")
load('DEU_adm3.RData')
paste(names(table(gadm$NAME_1)))
deSubInd<-which(gadm$NAME_1 %in% par.bundeslaender)
deSub<-gadm[deSubInd,]
labPt <- getSpPPolygonsLabptSlots(deSub)
namesKr<-deSub$NAME_3
numKr<-length(deSub)
areaKrList<-sapply(slot(deSub, "polygons"), function(x) sapply(slot(x, "Polygons"), slot, "area"))
areaKr<-rep(NA,times=numKr)
for(i in 1:numKr)
{
areaKr[i]<-sum(areaKrList[[i]])
}
# Intervalle und Farben bestimmen
vec=seq(from=0, to=1, by=0.01)
areaKr
interv<-findInterval(areaKr, vec, rightmost.closed = FALSE, all.inside = FALSE)
colVec<-rev(heat.colors(max(interv)))
intervCol<-colVec[interv]
# Plotten
plot(deSub, col=intervCol)
for(i in 1:numKr)
{
text(labPt[i,1],labPt[i,2],namesKr[i], cex=1 )
}
title (par.bundeslaender)
load("shiny-hist/immodat.RData")
load("r-spatial/shiny-hist/immodat.RData")
gadm<-deSub
numKr<-length(deSub)
Id<-deSub$ID_3
kreise<-as.data.frame(Id)
kreise$Kreis<-as.character(deSub$NAME_3)
kreise$Bundesland<-as.character(deSub$NAME_1)
kreise$Anz<-as.integer(0)
kreise$Col<-""
kreise
########## Verteilung der Geookordingaten auf Kreise ##########
for (i in 1:100)
{
x=immodat$lon
pnt<-as.data.frame(x)
pnt$y<-immodat$lat[i]
for (j in 1:numKr)
{
xVec<-deSub[j,]@polygons[[1]]@Polygons[[1]]@coords[,1]
yVec<-deSub[j,]@polygons[[1]]@Polygons[[1]]@coords[,2]
polypnts = cbind(x=xVec, y=yVec)
isIn<-pnt.in.poly(pnt,polypnts)$pip
if(isIn)
{
print(paste("Adresse:",adressen$Adresse[i]," Kreis:", kreise$Kreis[j]))
kreise$Anz[j]<-kreise$Anz[j]+1
immodat$kreis[i]<-kreise$Kreis[j]
immodat$land[i]<-kreise$Bundesland[j]
}
}
}
install.packages("maptools")
install.packages("geosphere")
install.packages("SDMTools")
library(sp)       # Spatial Package
library(rgeos)    # Polygonberechnungen
library(SDMTools) # Bestimmung ob Punkt im Polygon
load('DEU_adm3.RData')
load("r-spatial/shiny-hist/immodat.RData")
gadm<-deSub
numKr<-length(deSub)
Id<-deSub$ID_3
kreise<-as.data.frame(Id)
kreise$Kreis<-as.character(deSub$NAME_3)
kreise$Bundesland<-as.character(deSub$NAME_1)
kreise$Anz<-as.integer(0)
kreise$Col<-""
kreise
########## Verteilung der Geookordingaten auf Kreise ##########
for (i in 1:100)
{
x=immodat$lon
pnt<-as.data.frame(x)
pnt$y<-immodat$lat[i]
for (j in 1:numKr)
{
xVec<-deSub[j,]@polygons[[1]]@Polygons[[1]]@coords[,1]
yVec<-deSub[j,]@polygons[[1]]@Polygons[[1]]@coords[,2]
polypnts = cbind(x=xVec, y=yVec)
isIn<-pnt.in.poly(pnt,polypnts)$pip
if(isIn)
{
print(paste("Adresse:",adressen$Adresse[i]," Kreis:", kreise$Kreis[j]))
kreise$Anz[j]<-kreise$Anz[j]+1
immodat$kreis[i]<-kreise$Kreis[j]
immodat$land[i]<-kreise$Bundesland[j]
}
}
}
########## Verteilung der Geookordingaten auf Kreise ##########
for (i in 1:10)
{
print(i)
x=immodat$lon
pnt<-as.data.frame(x)
pnt$y<-immodat$lat[i]
for (j in 1:numKr)
{
xVec<-deSub[j,]@polygons[[1]]@Polygons[[1]]@coords[,1]
yVec<-deSub[j,]@polygons[[1]]@Polygons[[1]]@coords[,2]
polypnts = cbind(x=xVec, y=yVec)
isIn<-pnt.in.poly(pnt,polypnts)$pip
if(isIn)
{
print(paste("Adresse:",adressen$Adresse[i]," Kreis:", kreise$Kreis[j]))
kreise$Anz[j]<-kreise$Anz[j]+1
immodat$kreis[i]<-kreise$Kreis[j]
immodat$land[i]<-kreise$Bundesland[j]
}
}
}
immodat[1:10,]
immodat$kreis<-""
immodat$land<-""
########## Verteilung der Geookordingaten auf Kreise ##########
for (i in 1:10)
{
print(i)
x=immodat$lon
pnt<-as.data.frame(x)
pnt$y<-immodat$lat[i]
for (j in 1:numKr)
{
xVec<-deSub[j,]@polygons[[1]]@Polygons[[1]]@coords[,1]
yVec<-deSub[j,]@polygons[[1]]@Polygons[[1]]@coords[,2]
polypnts = cbind(x=xVec, y=yVec)
isIn<-pnt.in.poly(pnt,polypnts)$pip
if(isIn)
{
print(paste("Adresse:",adressen$Adresse[i]," Kreis:", kreise$Kreis[j]))
kreise$Anz[j]<-kreise$Anz[j]+1
immodat$kreis[i]<-kreise$Kreis[j]
immodat$land[i]<-kreise$Bundesland[j]
}
}
}
immodat[1:10,]
library(sp)
library(XML)
library(rjson)
#library(dplyr)
library(RJDBC)
library(stringr)
library(RCurl)
source("dbFunctions.R")
# source("readExpose.R")
# source("extractFunctions.R")
startzeit<-Sys.time()
channel<-connectPostgres()
stmnt<-
"with add as(select distinct on(address) id, address from immolist) select a.* from add a left join immogeo g on a.address=g.address where g.id is null"
#stmnt<-gsub("<IMPDATE>",as.character(Sys.Date(), "%Y-%m-%d"),stmnt)
#stmnt<-"select distinct on(address) id, address from immolist"
# stmnt = paste("select distinct on(address) id, address from immolist where qtype=1 and importdate='",
#               as.character(Sys.Date(), "%Y-%m-%d"),"' ",sep="")
#stmnt = paste("select distinct on(address) id, address from immolist where qtype=1")
whgm<-dbGetQuery(conn = channel, statement = stmnt)
disconnectPostgres(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(whgm)
whgm[1:10,]
proc.started<-0
for (i in 1:4500)
{
addr<-gsub("(Kreis)","",gsub(" ","%20",gsub("ß","ss",gsub("ä","ae",gsub("ö","oe",gsub("ü","ue", whgm$address[i]))))))
base_url<-"http://nominatim.openstreetmap.org/search?q=<ADDRESS>&format=json&polygon=0&addressdetails=1"
requrl<-gsub("<ADDRESS>", addr, base_url)
r <- getURL(requrl)
f <- try(fromJSON(r))
print(i)
print (requrl)
print(length(f))
if(length(f)>0)
{
lon<-f[[1]]$lon
df<-as.data.frame(lon)
df$lon<-as.numeric(f[[1]]$lon)
df$lat<-as.numeric(f[[1]]$lat)
df$placeid<-as.integer(f[[1]]$place_id)
df$id<-whgm$id[i]
df$address<-whgm$address[i]
if (proc.started==0){
dfa<-df
}else{
dfa<-rbind(dfa,df)
}
proc.started=1
}
}
requrl
r
requrl
str(whgm)
runApp("r-spatial/shiny-kreise")
setwd("E:/Work/immo")
library(shiny)
runApp("r-spatial/shiny-kreise")
runApp("r-spatial/shiny-punkte")
tr<-c(immodat$lon, immodat$lat)
tr
t=1
tr<-c(immodat$lon[t], immodat$lat[t])
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
ddf = read.table(header=T, sep=",", text="
country, val1, val2, val3
Nigeria,5,10,8
China,8,12,20
Brazil,15,9,20
Italy,9,25,5
Australia,15,5,25
")
i=1
ddf[1,]
library(Hmisc)
sPDF <- joinCountryData2Map(ddf
, joinCode = "NAME"
, nameJoinColumn = "country"
, verbose = TRUE)
df <- merge(x=ddf, y=sPDF@data[sPDF@data$ADMIN, c("ADMIN", "LON", "LAT")], by.x="country", by.y="ADMIN", all.x=TRUE)
plot(getMap())
for (i in 1:5)
subplot(
plot(ddf[,i],axes=F,xlab = "", ylab="", type="l",lwd=5)
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
subplot(
plot(ddf[,i],axes=F,xlab = "", ylab="", type="l",lwd=5)
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
plot(getMap())
for (i in 1:5)
{
subplot(
plot(ddf[,i],axes=F,xlab = "", ylab="", type="l",lwd=5)
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
}
df <- merge(x=ddf, y=sPDF@data[sPDF@data$ADMIN, c("ADMIN", "LON", "LAT")], by.x="country", by.y="ADMIN", all.x=TRUE)
library(Hmisc)
sPDF <- joinCountryData2Map(ddf
, joinCode = "NAME"
, nameJoinColumn = "country"
, verbose = TRUE)
df <- merge(x=ddf, y=sPDF@data[sPDF@data$ADMIN, c("ADMIN", "LON", "LAT")], by.x="country", by.y="ADMIN", all.x=TRUE)
install.packages("rworldmap")
library(rworldmap)
i=1
ddf[1,]
library(Hmisc)
sPDF <- joinCountryData2Map(ddf
, joinCode = "NAME"
, nameJoinColumn = "country"
, verbose = TRUE)
df <- merge(x=ddf, y=sPDF@data[sPDF@data$ADMIN, c("ADMIN", "LON", "LAT")], by.x="country", by.y="ADMIN", all.x=TRUE)
plot(getMap())
for (i in 1:5)
{
subplot(
plot(ddf[,i],axes=F,xlab = "", ylab="", type="l",lwd=5)
#     barplot(height=as.numeric(as.character(unlist(df[i, 2:4], use.names=F))),
#
#                   col=rainbow(3), ylim=range(df[,2:4]))
#
,x=df[i, 'LON'], y=df[i, 'LAT'], size=c(.3, .3))
}
legend("topright", legend=names(df[, 2:4]), fill=rainbow(3))
df[i, 'LON']
runApp("r-spatial/shiny-punkte")
addTrans <- function(color,trans)
{
# This function adds transparancy to a color.
# Define transparancy with an integer between 0 and 255
# 0 being fully transparant and 255 being fully visable
# Works with either color and trans a vector of equal length,
# or one of the two of length 1.
if (length(color)!=length(trans)&!any(c(length(color),length(trans))==1)) stop("Vector lengths not correct")
if (length(color)==1 & length(trans)>1) color <- rep(color,length(trans))
if (length(trans)==1 & length(color)>1) trans <- rep(trans,length(color))
num2hex <- function(x)
{
hex <- unlist(strsplit("0123456789ABCDEF",split=""))
return(paste(hex[(x-x%%16)/16+1],hex[x%%16+1],sep=""))
}
rgb <- rbind(col2rgb(color),trans)
res <- paste("#",apply(apply(rgb,2,num2hex),2,paste,collapse=""),sep="")
return(res)
}
runApp("r-spatial/shiny-punkte")
tr<-c(immodat$lon[t], immodat$lat[t])
lo<-c(immodat$lon[t],immodat$lon[i])
la<-c(immodat$lat[t],immodat$lat[i])
lines(lo,la, lwd=0.1, alpha=0.5, addTrans("blue", 0.8))
lines(lo,la, lwd=0.1, col=addTrans("blue", 0.8))
runApp("r-spatial/shiny-punkte")
lo<-c(immodat$lon[t],immodat$lon[i])
la<-c(immodat$lat[t],immodat$lat[i])
plot(1)
lines(lo,la, lwd=0.1, col=addTrans("blue", 0.8))
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-kreise")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-kreise")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
hist(immodat$lon)
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
