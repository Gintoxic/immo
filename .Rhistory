v1b<-gsub(pattern = "\\.", replacement = "", x = v1a)
immodat$preis<-as.numeric(v1b)
v2a<-gsub(pattern = "\\m²", replacement = "", x = immodat$val2)
immodat$qm<-as.numeric(v2a)
v3a<-gsub(pattern = "\\Zi.", replacement = "", x = immodat$val3)
v3b<-gsub(pattern = "\\,", replacement = ".", x = v3a)
immodat$zimmmer<-as.numeric(v3b)
library(gplots)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm)
#mycol<-c("#ffffff",(colorRampPalette(c("#ffffff", "#003193"))(20)[10:20]))
mycol<-colorRampPalette(c("#ffffff", "#003193"))(50)
mycol<-c("#ffffff", colorRampPalette(c("#A6B7D9", "#003193"))(50))
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func_choice="mean")
str(im.ret)
a<-im.ret
b<-as.matrix(a)
b[1,2:5]
attributes(a)
mm<-as.matrix(im.ret)
print(c(i,j))
i=2
j=3
if (mm[i,j]!=0){
text(xx[i]+(xx[2]-xx[1])/2, yy [j], i, pos=3)
}
str(im.ret)
im.unl<-unlist(im.ret)
a[,1]
a[1,1]==0.0
im.unl
load("DEU_adm1.RData")
a<-gadm@polygons[[1]]
for (i in 1:16)
{
poly<-gadm@polygons[[i]]@Polygons
print(  length(poly))
for (j in 1:length(poly))
{
lines(poly[[j]])
}
}
startzeit<-Sys.time()
channel<-connectPostgres()
stmnt<-
"select g.id, g.lon, g.lat, l.attribs,split_part(l.attribs,';',1) as val1,split_part(l.attribs,';',2) as val2,split_part(l.attribs,';',3) as val3 from immogeo g inner join immolist l on g.id=l.id"
immodat<-dbGetQuery(conn = channel, statement = stmnt)
disconnectPostgres(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(immodat)
plot(immodat$lon, immodat$lat)
v1a<-gsub(pattern = "\U20ac", replacement = "", x = immodat$val1)
v1b<-gsub(pattern = "\\.", replacement = "", x = v1a)
immodat$preis<-as.numeric(v1b)
v2a<-gsub(pattern = "\\m²", replacement = "", x = immodat$val2)
immodat$qm<-as.numeric(v2a)
v3a<-gsub(pattern = "\\Zi.", replacement = "", x = immodat$val3)
v3b<-gsub(pattern = "\\,", replacement = ".", x = v3a)
immodat$zimmmer<-as.numeric(v3b)
library(gplots)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm)
#mycol<-c("#ffffff",(colorRampPalette(c("#ffffff", "#003193"))(20)[10:20]))
mycol<-colorRampPalette(c("#ffffff", "#003193"))(50)
mycol<-c("#ffffff", colorRampPalette(c("#A6B7D9", "#003193"))(50))
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func_choice="mean")
str(im.ret)
a<-im.ret
b<-as.matrix(a)
b[1,2:5]
attributes(a)
mm<-as.matrix(im.ret)
print(c(i,j))
i=2
j=3
if (mm[i,j]!=0){
text(xx[i]+(xx[2]-xx[1])/2, yy [j], i, pos=3)
}
str(im.ret)
im.unl<-unlist(im.ret)
a[,1]
a[1,1]==0.0
im.unl
load("DEU_adm1.RData")
a<-gadm@polygons[[1]]
for (i in 1:16)
{
poly<-gadm@polygons[[i]]@Polygons
print(  length(poly))
for (j in 1:length(poly))
{
lines(poly[[j]])
}
}
startzeit<-Sys.time()
channel<-connectPostgres()
stmnt<-
"select g.id, g.lon, g.lat, l.attribs,split_part(l.attribs,';',1) as val1,split_part(l.attribs,';',2) as val2,split_part(l.attribs,';',3) as val3 from immogeo g inner join immolist l on g.id=l.id"
immodat<-dbGetQuery(conn = channel, statement = stmnt)
disconnectPostgres(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(immodat)
plot(immodat$lon, immodat$lat)
v1a<-gsub(pattern = "\U20ac", replacement = "", x = immodat$val1)
v1b<-gsub(pattern = "\\.", replacement = "", x = v1a)
immodat$preis<-as.numeric(v1b)
v2a<-gsub(pattern = "\\m²", replacement = "", x = immodat$val2)
immodat$qm<-as.numeric(v2a)
v3a<-gsub(pattern = "\\Zi.", replacement = "", x = immodat$val3)
v3b<-gsub(pattern = "\\,", replacement = ".", x = v3a)
immodat$zimmmer<-as.numeric(v3b)
library(gplots)
startzeit<-Sys.time()
channel<-connectPostgres()
stmnt<-
"select g.id, g.lon, g.lat, l.attribs,split_part(l.attribs,';',1) as val1,split_part(l.attribs,';',2) as val2,split_part(l.attribs,';',3) as val3 from immogeo g inner join immolist l on g.id=l.id"
immodat<-dbGetQuery(conn = channel, statement = stmnt)
disconnectPostgres(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(immodat)
plot(immodat$lon, immodat$lat)
v1a<-gsub(pattern = "\U20ac", replacement = "", x = immodat$val1)
v1b<-gsub(pattern = "\\.", replacement = "", x = v1a)
immodat$preis<-as.numeric(v1b)
v2a<-gsub(pattern = "\\m²", replacement = "", x = immodat$val2)
immodat$qm<-as.numeric(v2a)
v3a<-gsub(pattern = "\\Zi.", replacement = "", x = immodat$val3)
v3b<-gsub(pattern = "\\,", replacement = ".", x = v3a)
immodat$zimmmer<-as.numeric(v3b)
library(gplots)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm)
#mycol<-c("#ffffff",(colorRampPalette(c("#ffffff", "#003193"))(20)[10:20]))
mycol<-colorRampPalette(c("#ffffff", "#003193"))(50)
mycol<-c("#ffffff", colorRampPalette(c("#A6B7D9", "#003193"))(50))
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func_choice="mean")
str(im.ret)
a<-im.ret
b<-as.matrix(a)
b[1,2:5]
attributes(a)
mm<-as.matrix(im.ret)
print(c(i,j))
i=2
j=3
if (mm[i,j]!=0){
text(xx[i]+(xx[2]-xx[1])/2, yy [j], i, pos=3)
}
str(im.ret)
im.unl<-unlist(im.ret)
a[,1]
a[1,1]==0.0
im.unl
load("DEU_adm1.RData")
a<-gadm@polygons[[1]]
for (i in 1:16)
{
poly<-gadm@polygons[[i]]@Polygons
print(  length(poly))
for (j in 1:length(poly))
{
lines(poly[[j]])
}
}
v1a<-gsub(pattern = "\U20ac", replacement = "", x = immodat$val1)
v1b<-gsub(pattern = "\\.", replacement = "", x = v1a)
immodat$preis<-as.numeric(v1b)
v2a<-gsub(pattern = "\\m²", replacement = "", x = immodat$val2)
immodat$qm<-as.numeric(v2a)
v3a<-gsub(pattern = "\\Zi.", replacement = "", x = immodat$val3)
v3b<-gsub(pattern = "\\,", replacement = ".", x = v3a)
immodat$zimmmer<-as.numeric(v3b)
library(gplots)
mycol<-colorRampPalette(c("#ffffff", "#003193"))(50)
mycol<-c("#ffffff", colorRampPalette(c("#A6B7D9", "#003193"))(50))
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func_choice="mean")
ginhist2d<-
function (x, y = NULL,val, nbins = 200, same.scale = FALSE, na.rm = TRUE,
show = TRUE, col = c("black", heat.colors(12)), FUN = base::length,
func_choice = "sum",
xlab, ylab, ...)
{
if (is.null(y)) {
if (ncol(x) != 2)
stop("If y is ommitted, x must be a 2 column matirx")
y <- x[, 2]
x <- x[, 1]
}
if (length(nbins) == 1)
#nbins <- rep(nbins, 2)
nbins <- c(nbins, round(nbins*1.375))
nas <- is.na(x) | is.na(y)
if (na.rm) {
x <- x[!nas]
y <- y[!nas]
}
else stop("missinig values not permitted if na.rm=FALSE")
if (same.scale) {
x.cuts <- seq(from = min(x, y), to = max(x, y), length = nbins[1] +
1)
y.cuts <- seq(from = min(x, y), to = max(x, y), length = nbins[2] +
1)
}
else {
x.cuts <- seq(from = min(x), to = max(x), length = nbins[1] +
1)
y.cuts <- seq(from = min(y), to = max(y), length = nbins[2] +
1)
}
index.x <- cut(x, x.cuts, include.lowest = TRUE)
index.y <- cut(y, y.cuts, include.lowest = TRUE)
if (func_choice=="sum")
{
m <- tapply(val, list(index.x, index.y), FUN=sum)
}else if (func_choice=="mean")
{
m <- tapply(val, list(index.x, index.y), FUN=mean)
}else {warning("unknown function")}
if (identical(FUN, base::length))
m[is.na(m)] <- 0
if (missing(xlab))
xlab <- deparse(substitute(xlab))
if (missing(ylab))
ylab <- deparse(substitute(ylab))
if (show)
im.ret<-image(x.cuts, y.cuts, m, col = col, xlab = "", ylab = "", xaxt="n" ,yaxt="n" ,
...)
#   #labels
#   xx<-im.ret[[2]]
#   yy<-im.ret[[3]]
#   for (j in 1:length(yy))
#   {
#   for (i in 1:length(xx))
#   {
#     mm<-as.matrix(m)
#     print(c(i,j))
# #       if (mm[i,j]!=0){
# #       text(xx[i]+(xx[2]-xx[1])/2, yy [j], i, pos=3)
# #       }
#    }
#   }
# print(im.ret)
midpoints <- function(x) (x[-1] + x[-length(x)])/2
retval <- list()
retval$counts <- m
retval$x.breaks = x.cuts
retval$y.breaks = y.cuts
retval$x = midpoints(x.cuts)
retval$y = midpoints(y.cuts)
retval$nobs = length(x)
retval$call <- match.call()
class(retval) <- "hist2d"
retval
return(im.ret)
}
source("ginthist2d.R")
getwd()
source("ginthist2d.R")
source("ginhist2d.R")
source("ginhist2d.R")
getwd()
startzeit<-Sys.time()
channel<-connectPostgres()
stmnt<-
"select g.id, g.lon, g.lat, l.attribs,split_part(l.attribs,';',1) as val1,split_part(l.attribs,';',2) as val2,split_part(l.attribs,';',3) as val3 from immogeo g inner join immolist l on g.id=l.id"
immodat<-dbGetQuery(conn = channel, statement = stmnt)
disconnectPostgres(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(immodat)
plot(immodat$lon, immodat$lat)
v1a<-gsub(pattern = "\U20ac", replacement = "", x = immodat$val1)
v1b<-gsub(pattern = "\\.", replacement = "", x = v1a)
immodat$preis<-as.numeric(v1b)
v2a<-gsub(pattern = "\\m²", replacement = "", x = immodat$val2)
immodat$qm<-as.numeric(v2a)
v3a<-gsub(pattern = "\\Zi.", replacement = "", x = immodat$val3)
v3b<-gsub(pattern = "\\,", replacement = ".", x = v3a)
immodat$zimmmer<-as.numeric(v3b)
library(gplots)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm)
#mycol<-c("#ffffff",(colorRampPalette(c("#ffffff", "#003193"))(20)[10:20]))
mycol<-colorRampPalette(c("#ffffff", "#003193"))(50)
mycol<-c("#ffffff", colorRampPalette(c("#A6B7D9", "#003193"))(50))
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func_choice="mean")
str(im.ret)
a<-im.ret
b<-as.matrix(a)
b[1,2:5]
attributes(a)
mm<-as.matrix(im.ret)
print(c(i,j))
i=2
j=3
if (mm[i,j]!=0){
text(xx[i]+(xx[2]-xx[1])/2, yy [j], i, pos=3)
}
str(im.ret)
im.unl<-unlist(im.ret)
a[1,1]==0.0
im.unl
load("DEU_adm1.RData")
a<-gadm@polygons[[1]]
for (i in 1:16)
{
poly<-gadm@polygons[[i]]@Polygons
print(  length(poly))
for (j in 1:length(poly))
{
lines(poly[[j]])
}
}
source("ginhist2d.R")
getwd()
startzeit<-Sys.time()
channel<-connectPostgres()
stmnt<-
"select g.id, g.lon, g.lat, l.attribs,split_part(l.attribs,';',1) as val1,split_part(l.attribs,';',2) as val2,split_part(l.attribs,';',3) as val3 from immogeo g inner join immolist l on g.id=l.id"
immodat<-dbGetQuery(conn = channel, statement = stmnt)
disconnectPostgres(channel)
source("dbFunctions.R")
getwd()
startzeit<-Sys.time()
channel<-connectPostgres()
stmnt<-
"select g.id, g.lon, g.lat, l.attribs,split_part(l.attribs,';',1) as val1,split_part(l.attribs,';',2) as val2,split_part(l.attribs,';',3) as val3 from immogeo g inner join immolist l on g.id=l.id"
immodat<-dbGetQuery(conn = channel, statement = stmnt)
disconnectPostgres(channel)
str(immodat)
save(list = "immodat", file = "/shiny-punkte/immodat.RData")
save(list = "immodat", file = "immodat.RData")
v1a<-gsub(pattern = "\U20ac", replacement = "", x = immodat$val1)
v1b<-gsub(pattern = "\\.", replacement = "", x = v1a)
immodat$preis<-as.numeric(v1b)
v2a<-gsub(pattern = "\\m²", replacement = "", x = immodat$val2)
immodat$qm<-as.numeric(v2a)
v3a<-gsub(pattern = "\\Zi.", replacement = "", x = immodat$val3)
v3b<-gsub(pattern = "\\,", replacem
ent = ".", x = v3a)
str(immodat)
plot(immodat$lon, immodat$lat)
v1a<-gsub(pattern = "\U20ac", replacement = "", x = immodat$val1)
v1b<-gsub(pattern = "\\.", replacement = "", x = v1a)
immodat$preis<-as.numeric(v1b)
v2a<-gsub(pattern = "\\m²", replacement = "", x = immodat$val2)
immodat$qm<-as.numeric(v2a)
v3a<-gsub(pattern = "\\Zi.", replacement = "", x = immodat$val3)
v3b<-gsub(pattern = "\\,", replacement = ".", x = v3a)
immodat$zimmmer<-as.numeric(v3b)
library(gplots)
save(list = "immodat", file = "immodat.RData")
runApp("r-spatial/shiny-punkte")
library(shiny)
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("shiny-kreise")
runApp("r-spatial/shiny-kreise")
runApp("r-spatial/shiny-kreise")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-punkte")
runApp("r-spatial/shiny-kreise")
source("ginhist2d.R")
source("dbFunctions.R")
getwd()
startzeit<-Sys.time()
channel<-connectPostgres()
stmnt<-
"select g.id, g.lon, g.lat, l.attribs,split_part(l.attribs,';',1) as val1,split_part(l.attribs,';',2) as val2,split_part(l.attribs,';',3) as val3 from immogeo g inner join immolist l on g.id=l.id"
immodat<-dbGetQuery(conn = channel, statement = stmnt)
disconnectPostgres(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
#save(list = "immodat", file = "immodat.RData")
str(immodat)
plot(immodat$lon, immodat$lat)
v1a<-gsub(pattern = "\U20ac", replacement = "", x = immodat$val1)
v1b<-gsub(pattern = "\\.", replacement = "", x = v1a)
immodat$preis<-as.numeric(v1b)
v2a<-gsub(pattern = "\\m²", replacement = "", x = immodat$val2)
immodat$qm<-as.numeric(v2a)
v3a<-gsub(pattern = "\\Zi.", replacement = "", x = immodat$val3)
v3b<-gsub(pattern = "\\,", replacement = ".", x = v3a)
immodat$zimmmer<-as.numeric(v3b)
library(gplots)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm)
#mycol<-c("#ffffff",(colorRampPalette(c("#ffffff", "#003193"))(20)[10:20]))
mycol<-colorRampPalette(c("#ffffff", "#003193"))(50)
mycol<-c("#ffffff", colorRampPalette(c("#A6B7D9", "#003193"))(50))
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func_choice="mean")
str(im.ret)
a<-im.ret
b<-as.matrix(a)
b[1,2:5]
attributes(a)
mm<-as.matrix(im.ret)
print(c(i,j))
i=2
j=3
if (mm[i,j]!=0){
text(xx[i]+(xx[2]-xx[1])/2, yy [j], i, pos=3)
}
str(im.ret)
im.unl<-unlist(im.ret)
runApp("r-spatial/shiny-hist")
load('immodat.RData')
mycol<-colorRampPalette(c("#ffffff", "#003193"))(50)
mycol<-c("#ffffff", colorRampPalette(c("#A6B7D9", "#003193"))(50))
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func_choice="mean")
a<-im.ret
b<-as.matrix(a)
b[1,2:5]
b[1,2:5]
a<-im.ret
b<-as.matrix(a)
mm<-as.matrix(im.ret)
mm<-as.matrix(im.ret)
print(c(i,j))
a[1,1]==0.0
a<-gadm@polygons[[1]]
for (i in 1:16)
{
poly<-gadm@polygons[[i]]@Polygons
print(  length(poly))
for (j in 1:length(poly))
{
lines(poly[[j]])
}
}
runApp("r-spatial/shiny-hist")
mycol<-colorRampPalette(c("#ffffff", "#003193"))(50)
mycol<-c("#ffffff", colorRampPalette(c("#A6B7D9", "#003193"))(50))
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func_choice="mean")
a[1,1]==0.0
a<-gadm@polygons[[1]]
a[1,1]==0.0
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-hist")
load('immodat.RData')
mycol<-colorRampPalette(c("#ffffff", "#003193"))(50)
mycol<-c("#ffffff", colorRampPalette(c("#A6B7D9", "#003193"))(50))
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func_choice="mean")
runApp("r-spatial/shiny-hist")
load('immodat.RData')
y=immodat$lat, x=immodat$lon
y=immodat$lat
x=immodat$lon
immodat$qm
runApp("r-spatial/shiny-hist")
load('DEU_adm1.RData')
load('immodat.RData')
y=immodat$lat
x=immodat$lon
mycol<-colorRampPalette(c("#ffffff", "#003193"))(50)
mycol<-c("#ffffff", colorRampPalette(c("#A6B7D9", "#003193"))(50))
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func_choice="mean")
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 10,col=mycol, func_choice="mean")
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-hist")
immodat$qm
x=immodat$lon
immodat$lon
immodat$lat
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-hist")
View(immodat)
View(immodat)
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-hist")
runApp("r-spatial/shiny-hist")
load('immodat.RData')
setwd("/r-spatial/shiny-hist")
setwd("E:/Work/immo/r-spatial/shiny-hist")
load('immodat.RData')
y=immodat$lat
x=immodat$lon
str(immodat)
immodat$preis_pqm<-immodat$preis/immodat$qm
save(file="immodat.Rdata", list="immodat")
runApp("r-spatial/shiny-hist")
setwd("E:/Work/immo/r-spatial")
runApp("r-spatial/shiny-hist")
setwd("E:/Work/immo")
runApp("r-spatial/shiny-hist")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='gintoxic', token='ACA5C6CBF8B073FEE20D988348981187', secret='uPPKXtBsBPedqep5tMB9yY6s0Zgyucj15jEq1o5g')
deployApp("r-spatial/shiny-hist")
