library(SDMTools)
library(sp)
install.packages("RDSTK")
library(gdata)
library(RCurl)
library(rjson)
library(RDSTK)
library(SDMTools)
library(sp)
pf<-"c:/Tools/strawberry/perl/bin/perl.exe"
installXLSXsupport(perl=pf)
getwd()
xlsFile<-"Adressen.xls"
adressen_imp<-read.xls(xls=xlsFile, perl=pf)
str(adressen_imp)
Name<-adressen_imp$Name
adressen<-as.data.frame(Name)
adressen$Name<-as.character(adressen$Name)
adressen$Adresse<-as.character(adressen_imp$Adresse)
adressen$Name
adressen[2,1]
cur="Pfuhlgasse,Koblenz,Germany"
cur="Zeisigweg, Bonn, Germany"
base_url<-"http://nominatim.openstreetmap.org/search?q=<TO_REPLACE>&format=json&polygon=0&addressdetails=1"
base_url<-"http://maps.googleapis.com/maps/api/geocode/json?address=<TO_REPLACE>&sensor=false"
#cur<-adressen$Adresse[2]
requrl<-gsub("<TO_REPLACE>", cur, base_url)
requrl<-gsub(" ", "", requrl)
r <- getURL(requrl)
f <- fromJSON(r)
fs<-f[[1]]
fs$lat
fs$lon
#street2coordinates("2543 Graystone Place, Simi Valley, CA 93065")
load('DEU_adm3.RData')
[1] "50.743342"
> fs$lon
[1] "7.073286"
#plot(gadm, col="grey75", xlim=c(7,8), ylim=c(50,51))
de<-gadm
plot(de)
de1<-de[1,]
points(x=7.073286, 50.743342, col="red", lwd=10   )
de
text()
?points
str(de1)
de1p<-de1@polygons
de1p1<-de1p[[1]]
str(de1p1)
de1p1p<-de1p1@Polygons
str(de1p1p)
de1p1p[[1]]@coords
coo<-de[1,]@polygons[[1]]@Polygons[[1]]@coords
#########################
library(SDMTools)
#define the points and polygon
pnts = expand.grid(x=seq(1,6,0.1),y=seq(1,6,0.1))
polypnts = cbind(x=c(2,3,3.5,3.5,3,4,5,4,5,5,4,3,3,3,2,2,1,1,1,1,2),
y=c(1,2,2.5,2,2,1,2,3,4,5,4,5,4,3,3,4,5,4,3,2,2))
#plot the polygon and all points to be checked
plot(rbind(polypnts, pnts))
polygon(polypnts,col='#99999990')
#create check which points fall within the polygon
out = pnt.in.poly(pnts,polypnts)
head(out)
#identify points not in the polygon with an X
points(out[which(out$pip==0),1:2],pch='X')
startzeit<-Sys.time()
channel<-connectPostgres()
stmnt<-
"select g.id, g.lon, g.lat, l.attribs,split_part(l.attribs,';',1) as val1,split_part(l.attribs,';',2) as val2,split_part(l.attribs,';',3) as val3 from immogeo g inner join immolist l on g.id=l.id"
immodat<-dbGetQuery(conn = channel, statement = stmnt)
disconnectPostgres(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(immodat)
plot(immodat$lon, immodat$lat)
v1a<-gsub(pattern = "\U20ac", replacement = "", x = immodat$val1)
v1b<-gsub(pattern = "\\.", replacement = "", x = v1a)
immodat$preis<-as.numeric(v1b)
v2a<-gsub(pattern = "\\m²", replacement = "", x = immodat$val2)
immodat$qm<-as.numeric(v2a)
v3a<-gsub(pattern = "\\Zi.", replacement = "", x = immodat$val3)
v3b<-gsub(pattern = "\\,", replacement = ".", x = v3a)
immodat$zimmmer<-as.numeric(v3b)
library(gplots)
?hist2d
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm)
#mycol<-c("#ffffff",(colorRampPalette(c("#ffffff", "#003193"))(20)[10:20]))
mycol<-colorRampPalette(c("#ffffff", "#003193"))(50)
mycol<-c("#ffffff", colorRampPalette(c("#A6B7D9", "#003193"))(50))
ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
load("DEU_adm1.RData")
a<-gadm@polygons[[1]]
for (i in 1:16)
{
poly<-gadm@polygons[[i]]@Polygons
print(  length(poly))
for (j in 1:length(poly))
{
lines(poly[[j]])
}
}
startzeit<-Sys.time()
channel<-connectPostgres()
stmnt<-
"select g.id, g.lon, g.lat, l.attribs,split_part(l.attribs,';',1) as val1,split_part(l.attribs,';',2) as val2,split_part(l.attribs,';',3) as val3 from immogeo g inner join immolist l on g.id=l.id"
immodat<-dbGetQuery(conn = channel, statement = stmnt)
disconnectPostgres(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(immodat)
plot(immodat$lon, immodat$lat)
v1a<-gsub(pattern = "\U20ac", replacement = "", x = immodat$val1)
v1b<-gsub(pattern = "\\.", replacement = "", x = v1a)
immodat$preis<-as.numeric(v1b)
v2a<-gsub(pattern = "\\m²", replacement = "", x = immodat$val2)
immodat$qm<-as.numeric(v2a)
v3a<-gsub(pattern = "\\Zi.", replacement = "", x = immodat$val3)
v3b<-gsub(pattern = "\\,", replacement = ".", x = v3a)
immodat$zimmmer<-as.numeric(v3b)
library(gplots)
?hist2d
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm)
#mycol<-c("#ffffff",(colorRampPalette(c("#ffffff", "#003193"))(20)[10:20]))
mycol<-colorRampPalette(c("#ffffff", "#003193"))(50)
mycol<-c("#ffffff", colorRampPalette(c("#A6B7D9", "#003193"))(50))
ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
load("DEU_adm1.RData")
a<-gadm@polygons[[1]]
for (i in 1:16)
{
poly<-gadm@polygons[[i]]@Polygons
print(  length(poly))
for (j in 1:length(poly))
{
lines(poly[[j]])
}
}
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
im.ret
unlist(im.ret)
im.unl<-unlist(im.ret)
im.unl
im.ret[[1]]
im.ret[[2]]
im.ret[[3]]
for (i in 1:length(x))
{
text(xx[i], y[1], i)
}
xx<-im.ret[[2]]
yy<-im.ret[[3]]
for (i in 1:length(xx))
{
text(xx[i], yy[1], i)
}
for (i in 1:length(xx))
{
text(xx[i], yy[1], i, pos=3)
}
for (i in 1:length(xx))
{
text(xx[i]+(xx[2]-x[1]), yy[1], i, pos=3)
}
#labels
xx<-im.ret[[2]]
yy<-im.ret[[3]]
for (i in 1:length(xx))
{
text(xx[i]+(xx[2]-xx[1]), yy[1], i, pos=3)
}
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
#labels
xx<-im.ret[[2]]
yy<-im.ret[[3]]
for (i in 1:length(xx))
{
text(xx[i]+(xx[2]-xx[1]), yy[1], i, pos=3)
}
for (i in 1:length(xx))
{
text(xx[i]+(xx[2]-xx[1])/2, yy[1], i, pos=3)
}
#labels
xx<-im.ret[[2]]
yy<-im.ret[[3]]
for (j in 1:length(yy))
{
for (i in 1:length(xx))
{
text(xx[i]+(xx[2]-xx[1])/2, yy[1], i, pos=3)
}
}
#labels
xx<-im.ret[[2]]
yy<-im.ret[[3]]
for (j in 1:length(yy))
{
for (i in 1:length(xx))
{
text(xx[i]+(xx[2]-xx[1])/2, yy [j], i, pos=3)
}
}
ginhist2d<-
function (x, y = NULL,val,labels, nbins = 200, same.scale = FALSE, na.rm = TRUE,
show = TRUE, col = c("black", heat.colors(12)), FUN = base::length,
func = "sum",
xlab, ylab, ...)
{
if (is.null(y)) {
if (ncol(x) != 2)
stop("If y is ommitted, x must be a 2 column matirx")
y <- x[, 2]
x <- x[, 1]
}
if (length(nbins) == 1)
#nbins <- rep(nbins, 2)
nbins <- c(nbins, round(nbins*1.375))
nas <- is.na(x) | is.na(y)
if (na.rm) {
x <- x[!nas]
y <- y[!nas]
}
else stop("missinig values not permitted if na.rm=FALSE")
if (same.scale) {
x.cuts <- seq(from = min(x, y), to = max(x, y), length = nbins[1] +
1)
y.cuts <- seq(from = min(x, y), to = max(x, y), length = nbins[2] +
1)
}
else {
x.cuts <- seq(from = min(x), to = max(x), length = nbins[1] +
1)
y.cuts <- seq(from = min(y), to = max(y), length = nbins[2] +
1)
}
index.x <- cut(x, x.cuts, include.lowest = TRUE)
index.y <- cut(y, y.cuts, include.lowest = TRUE)
if (func=="sum")
{
m <- tapply(val, list(index.x, index.y), FUN=sum)
}else if (func=="mean")
{
m <- tapply(val, list(index.x, index.y), FUN=mean)
}else {warning("unknown function")}
if (identical(FUN, base::length))
m[is.na(m)] <- 0
if (missing(xlab))
xlab <- deparse(substitute(xlab))
if (missing(ylab))
ylab <- deparse(substitute(ylab))
if (show)
im.ret<-image(x.cuts, y.cuts, m, col = col, xlab = "", ylab = "", xaxt="n" ,yaxt="n" ,
...)
#labels
xx<-im.ret[[2]]
yy<-im.ret[[3]]
for (j in 1:length(yy))
{
for (i in 1:length(xx))
{
if (m[i,j]>0){
text(xx[i]+(xx[2]-xx[1])/2, yy [j], i, pos=3)
}
}
}
print(im.ret)
midpoints <- function(x) (x[-1] + x[-length(x)])/2
retval <- list()
retval$counts <- m
retval$x.breaks = x.cuts
retval$y.breaks = y.cuts
retval$x = midpoints(x.cuts)
retval$y = midpoints(y.cuts)
retval$nobs = length(x)
retval$call <- match.call()
class(retval) <- "hist2d"
retval
return(im.ret)
}
startzeit<-Sys.time()
channel<-connectPostgres()
stmnt<-
"select g.id, g.lon, g.lat, l.attribs,split_part(l.attribs,';',1) as val1,split_part(l.attribs,';',2) as val2,split_part(l.attribs,';',3) as val3 from immogeo g inner join immolist l on g.id=l.id"
immodat<-dbGetQuery(conn = channel, statement = stmnt)
disconnectPostgres(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(immodat)
plot(immodat$lon, immodat$lat)
v1a<-gsub(pattern = "\U20ac", replacement = "", x = immodat$val1)
v1b<-gsub(pattern = "\\.", replacement = "", x = v1a)
immodat$preis<-as.numeric(v1b)
v2a<-gsub(pattern = "\\m²", replacement = "", x = immodat$val2)
immodat$qm<-as.numeric(v2a)
v3a<-gsub(pattern = "\\Zi.", replacement = "", x = immodat$val3)
v3b<-gsub(pattern = "\\,", replacement = ".", x = v3a)
immodat$zimmmer<-as.numeric(v3b)
library(gplots)
?hist2d
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$preis)
#ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm)
#mycol<-c("#ffffff",(colorRampPalette(c("#ffffff", "#003193"))(20)[10:20]))
mycol<-colorRampPalette(c("#ffffff", "#003193"))(50)
mycol<-c("#ffffff", colorRampPalette(c("#A6B7D9", "#003193"))(50))
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
im.ret[[1]]
im.ret[[2]]
im.ret[[3]]
im.unl<-unlist(im.ret)
im.unl
load("DEU_adm1.RData")
a<-gadm@polygons[[1]]
for (i in 1:16)
{
poly<-gadm@polygons[[i]]@Polygons
print(  length(poly))
for (j in 1:length(poly))
{
lines(poly[[j]])
}
}
#labels
xx<-im.ret[[2]]
yy<-im.ret[[3]]
for (j in 1:length(yy))
{
for (i in 1:length(xx))
{
if (m[i,j]>0){
text(xx[i]+(xx[2]-xx[1])/2, yy [j], i, pos=3)
}
}
}
#labels
xx<-im.ret[[2]]
yy<-im.ret[[3]]
for (j in 1:length(yy))
{
for (i in 1:length(xx))
{
if (m[i,j]>0){
text(xx[i]+(xx[2]-xx[1])/2, yy [j], i, pos=3)
}
}
}
ginhist2d<-
function (x, y = NULL,val,labels, nbins = 200, same.scale = FALSE, na.rm = TRUE,
show = TRUE, col = c("black", heat.colors(12)), FUN = base::length,
func = "sum",
xlab, ylab, ...)
{
if (is.null(y)) {
if (ncol(x) != 2)
stop("If y is ommitted, x must be a 2 column matirx")
y <- x[, 2]
x <- x[, 1]
}
if (length(nbins) == 1)
#nbins <- rep(nbins, 2)
nbins <- c(nbins, round(nbins*1.375))
nas <- is.na(x) | is.na(y)
if (na.rm) {
x <- x[!nas]
y <- y[!nas]
}
else stop("missinig values not permitted if na.rm=FALSE")
if (same.scale) {
x.cuts <- seq(from = min(x, y), to = max(x, y), length = nbins[1] +
1)
y.cuts <- seq(from = min(x, y), to = max(x, y), length = nbins[2] +
1)
}
else {
x.cuts <- seq(from = min(x), to = max(x), length = nbins[1] +
1)
y.cuts <- seq(from = min(y), to = max(y), length = nbins[2] +
1)
}
index.x <- cut(x, x.cuts, include.lowest = TRUE)
index.y <- cut(y, y.cuts, include.lowest = TRUE)
if (func=="sum")
{
m <- tapply(val, list(index.x, index.y), FUN=sum)
}else if (func=="mean")
{
m <- tapply(val, list(index.x, index.y), FUN=mean)
}else {warning("unknown function")}
if (identical(FUN, base::length))
m[is.na(m)] <- 0
if (missing(xlab))
xlab <- deparse(substitute(xlab))
if (missing(ylab))
ylab <- deparse(substitute(ylab))
if (show)
im.ret<-image(x.cuts, y.cuts, m, col = col, xlab = "", ylab = "", xaxt="n" ,yaxt="n" ,
...)
#labels
xx<-im.ret[[2]]
yy<-im.ret[[3]]
for (j in 1:length(yy))
{
for (i in 1:length(xx))
{
if (m[i,j]>0){
text(xx[i]+(xx[2]-xx[1])/2, yy [j], i, pos=3)
}
}
}
print(im.ret)
midpoints <- function(x) (x[-1] + x[-length(x)])/2
retval <- list()
retval$counts <- m
retval$x.breaks = x.cuts
retval$y.breaks = y.cuts
retval$x = midpoints(x.cuts)
retval$y = midpoints(y.cuts)
retval$nobs = length(x)
retval$call <- match.call()
class(retval) <- "hist2d"
retval
return(im.ret)
}
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
source('E:/Work/immo/ginhist2d.R')
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
source('E:/Work/immo/ginhist2d.R')
source('E:/Work/immo/ginhist2d.R')
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
source('E:/Work/immo/ginhist2d.R')
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
source('E:/Work/immo/ginhist2d.R')
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
im.ret[[1]]
im.ret[[2]]
im.ret
str(im.ret)
attr(im.ret)
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
attributes(im.ret)
im.ret  [1,1]
im.ret  [15,10]
im.ret
im.ret[[1]]
im.ret[[1,1]]
unlist(im.ret)
a<-unlist(im.ret)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
a
a[1]
a[140]
a[,1]
a[2,]
a[2,]==0.0
a[,]==0.0
a[1,1]==0.0
source('E:/Work/immo/ginhist2d.R')
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
source('E:/Work/immo/ginhist2d.R')
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
source('E:/Work/immo/ginhist2d.R')
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
source('E:/Work/immo/ginhist2d.R')
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
source('E:/Work/immo/ginhist2d.R')
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
str(im.ret)
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
a<-im.ret[1]
a
a<-im.ret[[1]]
a
a<-im.ret
a
str(im.ret)
attributes(a)
a<-im.ret
attributes(a)
as.matrix(a)
attributes(a)
as.matrix(a)
b<-as.matrix(a)
b[1,]
b[1,2:5]
source('E:/Work/immo/ginhist2d.R')
source('E:/Work/immo/ginhist2d.R')
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
mm<-as.matrix(im.ret)
print(c(i,j))
i=2
j=3
if (mm[i,j]!=0){
text(xx[i]+(xx[2]-xx[1])/2, yy [j], i, pos=3)
}
mm[i,j]
text(xx[i]+(xx[2]-xx[1])/2, yy [j], i, pos=3)
source('E:/Work/immo/ginhist2d.R')
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
source('E:/Work/immo/ginhist2d.R')
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
str(im.ret)
source('E:/Work/immo/ginhist2d.R')
source('E:/Work/immo/ginhist2d.R')
im.ret<-ginhist2d( y=immodat$lat, x=immodat$lon,val=immodat$qm, nbins = 20, col=mycol, func="mean")
source('E:/Work/immo/ginhist2d.R')
