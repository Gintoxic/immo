abt<-c(abt1, abt2, "Ute", "Udo")
networkData <- data.frame(vor, abt)
simpleNetwork(networkData, fontSize=20)
# Load data
data(MisLinks)
data(MisNodes)
# Plot
forceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
library(RCurl)
URL <- "https://raw.githubusercontent.com/christophergandrud/networkD3/master/JSONdata/energy.json"
Energy <- getURL(URL, ssl.verifypeer = FALSE)
# Convert to data frame
EngLinks <- JSONtoDF(jsonStr = Energy,
array = "links")
EngNodes <- JSONtoDF(jsonStr = Energy,
array = "nodes")
# Plot
sankeyNetwork(Links = EngLinks, Nodes = EngNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
width = 700, fontSize = 12, nodeWidth = 30)
Energy
EngLinks <- JSONtoDF(jsonStr = Energy,
array = "links")
EngNodes <- JSONtoDF(jsonStr = Energy,
array = "nodes")
EngLinks
EngNodes
EngLinks
barplot(EngLinks)
ngLinks
barplot(EngLinks)
EngLinks
barplot(EngLinks$value)
library(sqldf)
install.packages("sqldf")
library(sqldf)
EngLinks
EngLinks
EngNodes
EngLinks
EngNodes
EngNodes$num<-rownames(EngNodes)
s<-sqldf(q)
q<-"select l.source, n.name, l.value from EngLinks l left join EngNodes n on l.source=n.num"
s<-sqldf(q)
table(EngLinks$source)
length(table(EngLinks$source))
EngNodes$num<-rownames(EngNodes)
library(sqldf)
q<-"select l.source, n.name, l.value from EngLinks l left join EngNodes n on l.source=n.num"
s<-sqldf(q)
s<-sqldf(q)
s
library(magrittr)
library(dplyr)
group_by(s$value, s$name)
q<-"select n.name, sum(l.value) as value from EngLinks l left join EngNodes n on l.source=n.num group by name"
s<-sqldf(q)
s
barplot(s)
barplot(s$value)
barplot(s$value, names.arg=s$name)
q<-"select l.target, n.name, l.value as value from EngLinks l left join EngNodes n on l.source=n.num "
s<-sqldf(q)
s
barplot(s$value, names.arg=s$name)
EngNodes <- JSONtoDF(jsonStr = Energy,
array = "nodes")
Energy
URL <- "https://raw.githubusercontent.com/christophergandrud/networkD3/master/JSONdata/energy.json"
Energy <- getURL(URL, ssl.verifypeer = FALSE)
# Convert to data frame
EngLinks <- JSONtoDF(jsonStr = Energy,
array = "links")
EngNodes <- JSONtoDF(jsonStr = Energy,
array = "nodes")
sankeyNetwork(Links = EngLinks, Nodes = EngNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
width = 700, fontSize = 12, nodeWidth = 30)
vor1<-rep("Ute", length(abt1))
vor2<-rep("Udo", length(abt2))
vor<-c(vor1, vor2 )
abt<-c(abt1, abt2 )
vor<-c(vor1, vor2, "Markus","Markus" )
abt<-c(abt1, abt2, "Ute", "Udo")
networkData <- data.frame(vor, abt)
simpleNetwork(networkData, fontSize=20,   )
sankeyNetwork(Source=vor, Target=abt)
as.data.frame(vor, abt)
as.data.frame(c(vor, abt))
as.data.frame(cvor)
as.data.frame(vor)
fr<-as.data.frame(vor)
fr$abt<-abt
fr$val<-1
sankeyNetwork(Links = fr,
Source = "vor", Target = "abt",
Value = "val",
width = 700, fontSize = 12, nodeWidth = 30)
sankeyNetwork(Links = fr,
Source = "vor", Target = "abt",Nodes=vor
Value = "val",
width = 700, fontSize = 12, nodeWidth = 30)
sankeyNetwork(Links = fr,
Source = "vor", Target = "abt",Nodes=vor,
Value = "val",
width = 700, fontSize = 12, nodeWidth = 30)
EngNodes
no<-unique(c(abt1, abt2, vor1, vor2))
no
as.data.frame(no)
nofr<-as.data.frame(no)
sankeyNetwork(Links = fr,
Source = "vor", Target = "abt",Nodes=nofr,
Value = "val",
width = 700, fontSize = 12, nodeWidth = 30)
nofr
EngNodes
fr
sankeyNetwork(Links = fr,
Source = "vor", Target = "abt",Nodes=nofr,
Value = "val", NodeID = "name",
width = 700, fontSize = 12, nodeWidth = 30)
fr
nofr
sankeyNetwork(Links = fr,
Source = "vor", Target = "abt",Nodes=nofr,
Value = "val", NodeID = "no",
width = 700, fontSize = 12, nodeWidth = 30)
sankeyNetwork(Links = fr,
Source = "vor", Target = "abt",Nodes=nofr,
Value = "val", NodeID = "no",
width = 700, fontSize = 12, nodeWidth = 30)
sankeyNetwork(Links = fr,
Source = "vor", Target = "abt",Nodes=nofr,
Value = "val", NodeID = "no",
width = 700, fontSize = 12, nodeWidth = 30)
vor_num<-(1,1,rep(2,4), rep(2,4))
vor_num<-c(1,1,rep(2,4), rep(2,4))
vor_num
vor_num<-c(1,1,rep(2,4), rep(3,4))
vor_num<-c(2:10)
vor_num
vor_num<-c(1,1,rep(2,4), rep(3,4))
abt_num<-c(2:10)
vor_num<-c(1,1,rep(2,4), rep(3,4))
abt_num<-c(2:11)
fr<-as.data.frame(vor_num)
fr
fr$abt_num<-abt_num
fr$val<-1
fr
no<-as.data.frame(1:11)
no
no<-c("Markus", "Ute", "Udo", abt1, abt2)
no
no<-as.data.frame(c("Markus", "Ute", "Udo", abt1, abt2), stringsAsFactors=F)
no
names(no)<-"namen"
fr
no
fr
fr$val[1:2]<-4
no<-as.data.frame(c("Markus", "Ute", "Udo", abt1, abt2), stringsAsFactors=F)
names(no)<-"namen"
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor", Target = "abt",
Value = "val", NodeID = "name",
width = 700, fontSize = 12, nodeWidth = 30)
no
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor", Target = "abt",
Value = "val", NodeID = "namen",
width = 700, fontSize = 12, nodeWidth = 30)
no
fr
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 700, fontSize = 12, nodeWidth = 30)
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 100, fontSize = 12, nodeWidth = 30)
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 100, fontSize = 12, nodeWidth = 50)
sankeyNetwork(Links = EngLinks, Nodes = EngNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
width = 700, fontSize = 12, nodeWidth = 30)
EngLinks
EngNodes
fr
str(EngLinks)
str(fr)
vor_num<-c(1,1,rep(2,4), rep(3,4))
abt_num<-as.numeric(c(2:11))
fr<-as.data.frame(vor_num)
fr$abt_num<-abt_num
fr$val<-1
fr$val[1:2]<-4
no<-as.data.frame(c("Markus", "Ute", "Udo", abt1, abt2), stringsAsFactors=F)
names(no)<-"namen"
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 100, fontSize = 12, nodeWidth = 50)
str(EngLinks)
str(fr)
fr<-as.data.frame(vor_num)
fr$abt_num<-abt_num
fr$val<-100
fr$val[1:2]<-400
no<-as.data.frame(c("Markus", "Ute", "Udo", abt1, abt2), stringsAsFactors=F)
names(no)<-"namen"
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 100, fontSize = 12, nodeWidth = 50)
str(EngLinks)
str(fr)
str(EngLinks)
str(fr)
str(EngNodes)
str(no)
no<-as.data.frame(c("Markus", "Ute", "Udo", abt1, abt2), stringsAsFactors=T)
names(no)<-"namen"
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 100, fontSize = 12, nodeWidth = 50)
str(EngLinks)
str(fr)
str(EngNodes)
str(no)
abt1<-c("Eugene","Frank","Maik","Alex")
abt2<-c("Nathali","Waldemar", "Dirk", "Valerij")
vor1<-rep("Ute", length(abt1))
vor2<-rep("Udo", length(abt2))
vor<-c(vor1, vor2 )
abt<-c(abt1, abt2 )
vor<-c(vor1, vor2, "Markus","Markus" )
abt<-c(abt1, abt2, "Ute", "Udo")
networkData <- data.frame(vor, abt)
simpleNetwork(networkData, fontSize=20,   )
getwd()
setwd("C:/Users/e.harschack/Documents/ITzza2/net")
library(magrittr)
simpleNetwork(networkData) %>%
saveNetwork(file = 'Net1.html')
################################
# Load data
data(MisLinks)
data(MisNodes)
# Plot
forceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
#################################
library(RCurl)
URL <- "https://raw.githubusercontent.com/christophergandrud/networkD3/master/JSONdata/energy.json"
Energy <- getURL(URL, ssl.verifypeer = FALSE)
# Convert to data frame
EngLinks <- JSONtoDF(jsonStr = Energy,
array = "links")
EngNodes <- JSONtoDF(jsonStr = Energy,
array = "nodes")
sankeyNetwork(Links = EngLinks, Nodes = EngNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
width = 700, fontSize = 12, nodeWidth = 30)
vor_num<-c(1,1,rep(2,4), rep(3,4))
abt_num<-as.numeric(c(2:11))
fr<-as.data.frame(vor_num)
fr$abt_num<-abt_num
fr$val<-100
fr$val[1:2]<-400
no<-as.data.frame(c("Markus", "Ute", "Udo", abt1, abt2), stringsAsFactors=T)
names(no)<-"namen"
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 100, fontSize = 12, nodeWidth = 50)
str(EngLinks)
str(fr)
str(EngNodes)
str(no)
str(EngLinks)
str(fr)
str(EngNodes)
str(no)
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 100, fontSize = 20, nodeWidth = 50)
sankeyNetwork(Links = EngLinks, Nodes = EngNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
width = 700, fontSize = 12, nodeWidth = 30)
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 100, fontSize = 20, nodeWidth = 50)
fr
str(EngLinks)
str(fr)
str(EngNodes)
str(no)
vor_num<-c(0,0,rep(1,4), rep(2,4))
abt_num<-as.numeric(c(1:10))
fr<-as.data.frame(vor_num)
fr$abt_num<-abt_num
fr$val<-100
fr$val[1:2]<-400
no<-as.data.frame(c("Markus", "Ute", "Udo", abt1, abt2), stringsAsFactors=T)
names(no)<-"namen"
str(EngLinks)
str(fr)
str(EngNodes)
str(no)
no
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 100, fontSize = 20, nodeWidth = 50)
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 700, fontSize = 20, nodeWidth = 50)
# Load data
data(MisLinks)
data(MisNodes)
# Plot
forceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
library(networkD3)
# Create fake data
abt1<-c("Eugene","Frank","Maik","Alex")
abt2<-c("Nathali","Waldemar", "Dirk", "Valerij")
vor1<-rep("Ute", length(abt1))
vor2<-rep("Udo", length(abt2))
vor<-c(vor1, vor2 )
abt<-c(abt1, abt2 )
vor<-c(vor1, vor2, "Markus","Markus" )
abt<-c(abt1, abt2, "Ute", "Udo")
networkData <- data.frame(vor, abt)
simpleNetwork(networkData, fontSize=20,   )
setwd("C:/Users/e.harschack/Documents/ITzza2/net")
library(magrittr)
simpleNetwork(networkData) %>%
saveNetwork(file = 'Net1.html')
library(networkD3)
# Load data
data(MisLinks)
data(MisNodes)
# Plot
forceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
library(networkD3)
# Create fake data
abt1<-c("Eugene","Frank","Maik","Alex")
abt2<-c("Nathali","Waldemar", "Dirk", "Valerij")
vor1<-rep("Ute", length(abt1))
vor2<-rep("Udo", length(abt2))
vor<-c(vor1, vor2 )
abt<-c(abt1, abt2 )
vor
abt
networkData <- data.frame(vor, abt)
networkData
simpleNetwork(networkData, fontSize=20)
vor<-c(vor1, vor2, "Markus","Markus" )
abt<-c(abt1, abt2, "Ute", "Udo")
networkData <- data.frame(vor, abt)
simpleNetwork(networkData, fontSize=20)
# Load data
data(MisLinks)
data(MisNodes)
# Plot
forceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
MisLinks
MisNodes
vor_num<-c(0,0,rep(1,4), rep(2,4))
abt_num<-as.numeric(c(1:10))
fr<-as.data.frame(vor_num)
fr$abt_num<-abt_num
fr$val<-100
fr$val[1:2]<-400
vor_num<-c(0,0,rep(1,4), rep(2,4))
abt_num<-as.numeric(c(1:10))
fr<-as.data.frame(vor_num)
fr$abt_num<-abt_num
fr$val<-100
fr$val[1:2]<-400
abt1<-c("Eugene","Frank","Maik","Alex")
abt2<-c("Nathali","Waldemar", "Dirk", "Valerij")
no<-as.data.frame(c("Markus", "Ute", "Udo", abt1, abt2), stringsAsFactors=T)
names(no)<-"namen"
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 700, fontSize = 20, nodeWidth = 50)
vor_num<-c(0,0,rep(1,4), rep(2,4))
abt_num<-as.numeric(c(1:10))
fr<-as.data.frame(vor_num)
fr$abt_num<-abt_num
fr$val<-100
fr$val[1:2]<-400
abt1<-c("Eugene","Frank","Maik","Alexandr")
abt2<-c("Nathali","Waldemar", "Dirk", "Valerij")
no<-as.data.frame(c("Markus", "Ute", "Udo", abt1, abt2), stringsAsFactors=T)
names(no)<-"namen"
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 700, fontSize = 20, nodeWidth = 50)
vor_num<-c(0,0,rep(1,4), rep(2,4))
abt_num<-as.numeric(c(1:10))
fr<-as.data.frame(vor_num)
fr$abt_num<-abt_num
fr$val<-100
fr$val[1:2]<-200
abt1<-c("Eugene","Frank","Maik","Alexandr")
abt2<-c("Nathali","Waldemar", "Dirk", "Valerij")
no<-as.data.frame(c("Markus", "Ute", "Udo", abt1, abt2), stringsAsFactors=T)
names(no)<-"namen"
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 700, fontSize = 20, nodeWidth = 50)
# install.packages("shinydashboard")
#
# library(shiny)
# library(shinydashboard)
#
# ui <- dashboardPage(
#   dashboardHeader(),
#   dashboardSidebar(),
#   dashboardBody()
# )
#
# server <- function(input, output) { }
#
# shinyApp(ui, server)
############################
checkboxInput(inputId="checkb", label="Checkbox", value = FALSE))
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(title = "Controls", sliderInput("slider", "Number of observations:", 1, 100, 50)),
box(checkboxInput(inputId="checkb", label="Rot färben?", value = FALSE))
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
if (input$checkb==F)
{
hist(data)
}else{hist(data, col="red")}
})
}
shinyApp(ui, server)
setwd("C:/Work/shiny2d3/shiny-js-examples-master")
library(shiny)
runApp("output")
setwd("C:/Users/e.harschack/gitrepos")
library(shiny)
setwd("C:\\Users\\e.harschack\\Documents\\R\\r-spatial")
runApp("shiny-kreise")
setwd("C:\\Users\\e.harschack\\Documents\\R\\r-spatial")
getwd()
library(shiny)
runApp("shiny-kreise")
runApp("./shiny-kreise")
setwd("C:/Users/e.harschack/Documents/r-spatial")
setwd("C:/Users/e.harschack/gitrepos/r-spatial/shiny-kreise")
getwd()
runApp("./shiny-kreise")
setwd("C:/Users/e.harschack/gitrepos/r-spatial/shiny-kreise")
getwd()
setwd("C:/Users/e.harschack/gitrepos/r-spatial/shiny-kreise")
getwd()
runApp("shiny-kreise")
library(shiny)
setwd("C:/Users/e.harschack/gitrepos/r-spatial/shiny-kreise")
getwd()
runApp("shiny-kreise")
