{
    "contents" : "#--------------------------------------------------------------------------------\n#install.packages(c(\"gdata\",\"RCurl\",\"rjson\",\"SDMTools\",#\"sp\",\"gplots\",\"gmt\",\"maptools\",\"geosphere\", \"png\")\n\n########## ??? VORBEREITUNG ??? ########## \n\n########## Pakete laden ########## \nlibrary(gdata)    # Excel lesen\nlibrary(RCurl)    # Umgang mit Curl\nlibrary(rjson)    # Umgang mit Json\nlibrary(SDMTools) # Bestimmung ob Punkt im Polygon\nlibrary(sp)       # Spatial Package\nlibrary(gplots)   # Textplot\nlibrary(gmt)      # Map Tools (geodist)\nlibrary(maptools) # Map Tools\nlibrary(geosphere) # Spherische Berechnungen\nlibrary(png)      # Umgang mit PNG-Bilddateien\n\n#library(plotrix) # boxed.labels\n#library(RDSTK)   # R Data Science Toolkit\n\n########## Variablen zuweisen, Pfade festlegen ########## \npar.fluesse<-c(\"Rhein\", \"Mosel\",\"Main\", \"Sieg\", \"Ahr\")\npar.fluesse_col<-\"darkblue\"\npar.fluesse_lwd<-2\npar.bundeslaender<-c(\"Rheinland-Pfalz\", \"Nordrhein-Westfalen\", \"Hessen\")\n\npar.textOffset<-0.03 # Abstand f?r Beschriftungen in L?ngengraden\npar.refPoint<-1     # Nummer des Referenzpunktes\npar.edge<-0.2       # Rand auf der Karte in L?ngen- / Breitengraden\n\npar.staedte<-c(\"Bonn\", \"Koeln\",\"Frankfurt\",\"Mainz\",\"Trier\", \"Siegen\") #\"Koblenz\"\npar.geocodeCities<-F  # St?dte geokodieren (T) oder laden (F)\npar.outputPdf<-F   # Output in PDF schreiben (T) \npar.fluesseLesen<-F\npar.logo<-T\npar.logoWidth<-30000 #in m\npar.useProxy<-T\n\n# Arebeitsverzeichnis\n#setwd(\"\\\\\\\\DCD-STORAGE\\\\public\\\\r-spatial\")\nsetwd(\"C:\\\\Users\\\\e.harschack\\\\Documents\\\\R\\\\r-spatial\")\ngetwd()\n\n# Pfad der perl.exe (herunterzuladen bei http://strawberryperl.com)\n#pf<-\"\\\\\\\\DCD-STORAGE\\\\software\\\\Statistik\\\\Portable\\\\perl\\\\bin\\\\perl.exe\"\npf<-\"C:\\\\Tools\\\\strawberry\\\\perl\\\\bin\\\\perl.exe\"\n\n\n#################################################################################\n#################################################################################\n#################################################################################\n\ngetwd()\n\n########## ??? IMPORT ??? ########## \n\n########## Flussl?ufe importieren oder laden ########## \nif (par.fluesseLesen)\n{\n  # Quelle: http://www.geofabrik.de\n  fluesse_hes <- readShapeLines(\"./hessen-latest/waterways.shp\")\n  fluesse_nrw <- readShapeLines(\"./nordrhein-westfalen-latest/waterways.shp\")\n  fluesse_rlp <- readShapeLines(\"./rheinland-pfalz-latest/waterways.shp\")\n  save(\"fluesse_hes\", \"fluesse_nrw\", \"fluesse_rlp\", file=\"fluesse.Rdata\")\n}else{\n  load (file=\"fluesse.Rdata\")\n}\n\n\n########## Adressen einlesen ########## \ninstallXLSXsupport(perl=pf)\n\nxlsFile<-\"Adressen.xls\"\nadressen_imp<-read.xls(xls=xlsFile, perl=pf)\n\nName<-adressen_imp$Name\nadressen<-as.data.frame(Name)\nadressen$Name<-as.character(adressen$Name)\nadressen$Adresse<-as.character(adressen_imp$Adresse)\nadressen$Bahnfahrer<-as.numeric(adressen_imp$Bahnfahrer)\nadressen$kreis<-adressen$land<-adressen$dist<-adressen$lon<-adressen$lat<-NA\n\nadressen\n\n########## ??? GEOKODIERUNG ??? ########## \n########## Geokodierung Adressen ########## \nnumAdr<-dim(adressen)[1]\n\nprint(paste(\"[Hinweis:]\", numAdr, \"Adressen wurden gelesen\"))\n\n## Nominatim-API URL (OpenStreetMap) \nbase_url<-\"http://nominatim.openstreetmap.org/search?q=<TO_REPLACE>&format=json&polygon=0&addressdetails=1\"\n\n## Googlemaps API URL: Ausgabenverarbeitung mu? angepa?t werden\n#base_url<-\"http://maps.googleapis.com/maps/api/geocode/json?address=<TO_REPLACE>&sensor=false\"\n\nfor (i in 1:numAdr)\n{\n  curAd<-adressen$Adresse[i]\n  curAdNoblank<-requrl<-gsub(\" \", \"\", curAd)\n  requrl<-gsub(\"<TO_REPLACE>\", curAdNoblank, base_url)\n\n  if(par.useProxy){\n    curlHandle <- getCurlHandle()\n    curlSetOpt(.opts = list(proxy = '10.1.5.3:3128'), curl = curlHandle)\n    r <- try(getURL(requrl,curl = curlHandle))\n  }else{\n    r <- try(getURL(requrl))\n  }\n  \n  \n  f <- try(fromJSON(r))\n  if(length(f)>0)\n  {\n    fs<-f[[1]]\n    adressen$lat[i]<-as.numeric(fs$lat)\n    adressen$lon[i]<-as.numeric(fs$lon)\n    print(paste(\"Geokodierung erfolgreich f?r\", curAd))\n  }else{\n    print(paste(\"Geokodierung fehlgeschlagen f?r\", curAd))\n  }\n}\n\n#save(\"adressen\", file=\"adressen.RData\")\n#load(file=\"adressen.RData\")\n\nprint(paste(\"[Hinweis:]\", length(which(!is.na(adressen$lat))), \"Adressen wurden kodiert\"))\nprint(paste(\"[Hinweis:]\", length(which(is.na(adressen$lat))), \"Adressen wurden nicht kodiert\"))\n\n########## Berechnung Kartenausschnitt ########## \nlatSpan<-c(min(adressen$lat)-par.edge,max(adressen$lat)+par.edge)\nlonSpan<-c(min(adressen$lon)-par.edge,max(adressen$lon)+par.edge)\n\n########## Geokodierung St?dte ########## \n\nif (par.geocodeCities)\n{\nStadt<-par.staedte\nstaedte<-as.data.frame(Stadt)\nstaedte$Stadt<-as.character(staedte$Stadt)\nstaedte$lat<-staedte$lon<-NA\n\nnumStaedte<-length(par.staedte)\nfor (i in 1:numStaedte)\n{\n  curSt<-staedte$Stadt[i]\n  curStNoblank<-requrl<-gsub(\" \", \"\", curSt)\n  requrl<-gsub(\"<TO_REPLACE>\", curStNoblank, base_url)\n  \n  if(par.useProxy){\n    curlHandle <- getCurlHandle()\n    curlSetOpt(.opts = list(proxy = '10.1.5.3:3128'), curl = curlHandle)\n    r <- try(getURL(requrl,curl = curlHandle))\n  }else{\n    r <- try(getURL(requrl))\n  }\n  \n  f <- try(fromJSON(r))\n  if(length(f)>0)\n    {\n    fs<-f[[1]]\n    staedte$lat[i]<-as.numeric(fs$lat)\n    staedte$lon[i]<-as.numeric(fs$lon)\n    print(paste(\"Geokodierung erfolgreich f?r\", curSt))\n    }  \n  }\n  save(\"staedte\", file=\"staedte.Rdata\")\n}else{\n load(file=\"staedte.Rdata\") \n}\nnumStaedte<-dim(staedte)[1]\n\n########## R?umliche Daten laden ########## \n#Qelle: http://www.gadm.org/\nload('DEU_adm3.RData')\n\n\n\ndeSubInd<-which(gadm$NAME_1 %in% par.bundeslaender)\ndeSub<-gadm[deSubInd,]\n\n\n########## Kreise aus gadm ermitteln ########## \nnumKr<-length(deSub)\nId<-deSub$ID_3\nkreise<-as.data.frame(Id)\nkreise$Kreis<-as.character(deSub$NAME_3)\nkreise$Bundesland<-as.character(deSub$NAME_1)\nkreise$Anz<-as.integer(0)\nkreise$Col<-\"\"\n\nkreise\n\n########## Verteilung der Geookordingaten auf Kreise ########## \n# Erste Adresse ist Referenz (Decadis Hauptquartier)\nfor (i in 2:numAdr)\n{\n  x=adressen$lon[i]\n  pnt<-as.data.frame(x)\n  pnt$y<-adressen$lat[i]\n\n  for (j in 1:numKr)\n  {\n  xVec<-deSub[j,]@polygons[[1]]@Polygons[[1]]@coords[,1]\n  yVec<-deSub[j,]@polygons[[1]]@Polygons[[1]]@coords[,2]\n  polypnts = cbind(x=xVec, y=yVec)\n  \n  isIn<-pnt.in.poly(pnt,polypnts)$pip\n  if(isIn)\n    {\n      print(paste(\"Adresse:\",adressen$Adresse[i],\" Kreis:\", kreise$Kreis[j]))\n      kreise$Anz[j]<-kreise$Anz[j]+1\n      \n      adressen$kreis[i]<-kreise$Kreis[j]\n      adressen$land[i]<-kreise$Bundesland[j]\n    }  \n  }\n}\n\nkreise\nnumCols<-max(kreise$Anz)\n\n########## Kreisen Farbe zuweisen ########## \ncols<-c(\"white\",rev(terrain.colors(numCols*2)[1:numCols]))\n\nbarplot(1:10, col=cols)\n\n#cols<-c(\"white\",rev(heat.colors(numCols)))\n#cols<-c(\"white\",rev(terrain.colors(numCols)))\n\nfor (i in 1:numKr)\n{\n  kreise$Col[i]<-cols[kreise$Anz[i]+1]\n}\ndeSubC<-merge(x=deSub, y=kreise, by.x=\"ID_3\", by.y=\"Id\")\n\n########## ??? PLOTS ??? ########## \nif (par.outputPdf)\n{\n  pdfFilename<-paste(\"./_output/output\",format(Sys.time(),\"%Y%m%d_%H%M\"), \".pdf\", sep=\"\")\n  pdf(pdfFilename,width=11.69,height=8.27)\n}\n\n########## Textplot Kreise ########## \nbewohnteKreise<-kreise[which(kreise$Anz>0),]\nbewohnteKreiseSort<-bewohnteKreise[order(-bewohnteKreise$Anz),c(\"Id\", \"Kreis\", \"Bundesland\", \"Anz\", \"Col\")]\n\ntextplot(bewohnteKreiseSort[c(\"Id\", \"Kreis\", \"Bundesland\", \"Anz\")])\ntitle(\"Tabelle: Anzahl Kollegen nach Kreisen\")\n\n########## Barplot Kreise ########## \nmids<-barplot(bewohnteKreiseSort$Anz, col=bewohnteKreiseSort$Col, axes=F)\ntext(mids, \n     max(bewohnteKreiseSort$Anz)/2, \n     paste(bewohnteKreiseSort$Kreis,\"\\n\",bewohnteKreiseSort$Bundesland, sep=\"\"), \n     srt=90 )\naxis(2, at=0:max(bewohnteKreiseSort$Anz))\ntitle(\"Barplot: Anzahl Kollegen nach Kreis\")\n\n########## Plot Karte ########## \nplot(deSubC, xlim=lonSpan,ylim=latSpan, col=deSubC$Col)\ntitle(\"Wohnorte der Kollegen\")\n\n########## Fluesse plotten ########## \nlines(fluesse_hes[which(fluesse_hes$name %in% par.fluesse),], col=par.fluesse_col, lwd=par.fluesse_lwd)\nlines(fluesse_nrw[which(fluesse_nrw$name %in% par.fluesse),], col=par.fluesse_col, lwd=par.fluesse_lwd)\nlines(fluesse_rlp[which(fluesse_rlp$name %in% par.fluesse),], col=par.fluesse_col, lwd=par.fluesse_lwd)\n\n########## Staedte plotten ########## \nfor (i in 1:numStaedte)\n{\n  points( staedte$lon[i],staedte$lat[i], pch=15, cex=1) #col=\"red1\"\n  text( staedte$lon[i],staedte$lat[i]+par.textOffset,staedte$Stadt[i])\n  #boxed.labels(x=staedte$lon[i],y=staedte$lat[i]+par.textOffset,labels=staedte$Stadt[i], bg=\"white\")\n}\n\n########## Punkte, Texte, Linien ########## \nfor (i in 1:numAdr)\n{\n  lines(c(adressen$lon[par.refPoint], adressen$lon[i]), c(adressen$lat[par.refPoint], adressen$lat[i])) \n  points( adressen$lon[i],adressen$lat[i], pch=20, cex=1) \n  #text( adressen$lon[i],adressen$lat[i]+par.textOffset,adressen$Name[i])\n  adressen$dist[i]<-geodist(adressen$lon[i], adressen$lat[i],adressen$lon[par.refPoint],adressen$lat[par.refPoint], units=\"km\")\n}\n\n######### Logo lesen und plotten #########\nif (par.logo)\n{\n  logoPng = readPNG(\"decadis.png\")\n  logoBild = as.raster(logoPng[,,1:3])\n\n  logoRatio<-dim(logoBild)[2]/dim(logoBild)[1]\n  \n  logoHeight<-par.logoWidth/logoRatio\n      \n  logoMid<-c(adressen$lon[par.refPoint],adressen$lat[par.refPoint])\n  \n  logoHyp<-sqrt( (logoHeight/2)^2 +(par.logoWidth/2)^2)\n  \n  angle<-90-acos( (par.logoWidth/2) / logoHyp )*180/pi\n  \n  logoUpRight<-destPoint(logoMid,angle,logoHyp)\n  logoLowLeft<-destPoint(logoMid,angle+180,logoHyp)\n\n  rasterImage(logoBild, logoLowLeft[1], logoLowLeft[2],\n              logoUpRight[1],logoUpRight[2])\n  \n}\n\n########## Textplot Adressenliste ########## \ntextplot(adressen[,c(\"Name\",\"Adresse\",\"dist\",\"Bahnfahrer\")])\ntitle(\"Adressenliste\")\n\nif (par.outputPdf){dev.off()}\n\n",
    "created" : 1439487919753.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "787411884",
    "id" : "898FAF80",
    "lastKnownWriteTime" : 1399908178,
    "path" : "E:/Work/immo/r-spatial/r-spatial.R",
    "project_path" : "r-spatial/r-spatial.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}